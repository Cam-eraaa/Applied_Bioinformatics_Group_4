ggplot(line, mapping = aes(x = PC1,y = PC2, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC1,y = PC2, color = factor, shape = time))+
scale_color_viridis(discrete = TRUE, option = "D")
sampleInfoFile = paste(params$workingDir, params$resultsDir,"sampleInfo.QC.tab.txt", sep = "/")
write.table(x = sampleInfo.QC, file = sampleInfoFile, quote = F, sep =  "\t", row.names = F,col.names = T)
geneTableFile = paste(params$workingDir, params$resultsDir,"gene.QC.tab.txt", sep = "/")
write.table(x = geneInfo.QC, file = geneTableFile, quote = F, sep =  "\t", row.names = F, col.names = T)
countTableFile = paste(params$workingDir, params$resultsDir,"counts.QC.tab.txt", sep = "/")
write.table(x = countData.QC, file = countTableFile, quote = F, sep =  "\t", row.names = T, col.names = T)
rlogTableFile = paste(params$workingDir, params$resultsDir,"rlog.QC.tab.txt", sep = "/")
write.table(x = normExpression.QC, file = rlogTableFile, quote = F, sep =  "\t", row.names = T, col.names = T)
# The kmeans analysis requires the columns: (PROseqdata) geneID,factor, direction, annotation,annotation2, Time, Gd7,Toll10b,Toll9 and (annotation2) geneID, annotation, distance, factor, direction" from the PROseq.data.tsv file
# The PROseq.data.tsv file has the headers: geneID	factor	direction	annotation	PC1	PC2	PC3	distance	Gd7	Time	Toll10b	Toll9	annotation2	sampleName	rlog	mutant	time	replicate	bamFile	transcriptID	ppcCount	gbcCount	Chr	Start	End	Strand	Length	PI	GBClog	PPClog
# pctable contains: PC1-6, samplename, mutant, time, replicate, bamfile, factor
geneInfo.QC$Geneid %in% knownGenes$`Current ID`
geneInfo.QC$knownGene[geneInfo.QC$Geneid %in% knownGenes$`Current ID`]
geneInfo.QC[geneInfo.QC$Geneid %in% knownGenes$`Current ID`]
geneInfo.QC$Geneid[geneInfo.QC$Geneid %in% knownGenes$`Current ID`]
knownGenes
knitr::opts_chunk$set(echo = TRUE)
#BiocManager::install("clusterProfiler")
#BiocManager::install("org.Dm.eg.db")
#install.packages("ggrepel")
#install.packages("kableExtra")
#install.packages("heatmap3")
#install.packages("tsne")
#install.packages("umap")
library(umap)
library(clusterProfiler)
library(org.Dm.eg.db)
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(heatmap3)
library(ggrepel)
library(tsne)
knitr::opts_chunk$set(echo = TRUE)
#BiocManager::install("clusterProfiler")
#BiocManager::install("org.Dm.eg.db")
#install.packages("ggrepel")
#install.packages("kableExtra")
#install.packages("heatmap3")
#install.packages("tsne")
#install.packages("umap")
library(umap)
library(clusterProfiler)
library(org.Dm.eg.db)
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(heatmap3)
library(ggrepel)
library(tsne)
```{r  add  transcript to gene Information}
# Loading the gtf file to extract annotation.
gtfFile = paste(params$workingDir, "Drosophila_melanogaster.BDGP6.28.101.gtf", sep = "/")
gtfInfo = read.table(file = gtfFile, header = F, sep = "\t", quote = "", stringsAsFactors = F)
# Chosing only the annotation for genes
gtfInfoGene = gtfInfo %>% dplyr::filter(V3 == "gene")
# Extract only gene name and geneID
gtfInfoGene = gtfInfoGene[grep(pattern = "gene_biotype \"protein_coding\"",x = gtfInfoGene$V9 ),  ]
gtfInfoGene= gtfInfoGene %>% separate(col = V9,sep = ";",into =  c("geneID1", "geneName1"))
gtfInfoGene= gtfInfoGene %>% separate(col = geneID1,sep = "\"",into =  c("irrelevant", "geneID"))
gtfInfoGene= gtfInfoGene %>% separate(col = geneName1,sep = "\"",into =  c("irrelevant1", "geneName"))
gtfInfoAnnotation = gtfInfoGene  %>% dplyr::select(V1,V4,V5,V7,geneID,geneName)
# Summerize the information in a table with Chr, start, stop, direction,
PROseqGenes = gtfInfoAnnotation %>% dplyr::rename("Chr"= V1, "GeneStart" = V4,"GeneStop" = V5,"geneDir" = V7)
PROseqGenes$Chr = paste ("chr",PROseqGenes$Chr, sep ="")
#Extract RNA information
gtfInfomRNA = gtfInfo %>% dplyr::filter(V3 == "transcript")
#Extract geneID and transcriptID
gtfInfomRNA = gtfInfomRNA[grep(pattern = "gene_biotype \"protein_coding\"",x = gtfInfomRNA$V9 ),  ]
gtfInfomRNA_DF= gtfInfomRNA %>% separate(col = V9,sep = ";",into =  c("geneID1", "transcriptID1"))
gtfInfomRNA_DF= gtfInfomRNA_DF %>% separate(col = geneID1,sep = "\"",into =  c("irrelevant", "geneID"))
gtfInfomRNA_DF= gtfInfomRNA_DF %>% separate(col = transcriptID1,sep = "\"",into =  c("irrelevant1", "transcriptID"))
gene2transcriptInfo  = gtfInfomRNA_DF %>% dplyr::select(geneID,transcriptID)
knitr::opts_chunk$set(echo = TRUE)
#BiocManager::install("clusterProfiler")
#BiocManager::install("org.Dm.eg.db")
#install.packages("ggrepel")
#install.packages("kableExtra")
#install.packages("heatmap3")
#install.packages("tsne")
#install.packages("umap")
library(umap)
library(clusterProfiler)
library(org.Dm.eg.db)
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(heatmap3)
library(ggrepel)
library(tsne)
# Loading the gtf file to extract annotation.
gtfFile = paste(params$workingDir, "Drosophila_melanogaster.BDGP6.28.101.gtf", sep = "/")
gtfInfo = read.table(file = gtfFile, header = F, sep = "\t", quote = "", stringsAsFactors = F)
# Chosing only the annotation for genes
gtfInfoGene = gtfInfo %>% dplyr::filter(V3 == "gene")
# Extract only gene name and geneID
gtfInfoGene = gtfInfoGene[grep(pattern = "gene_biotype \"protein_coding\"",x = gtfInfoGene$V9 ),  ]
gtfInfoGene= gtfInfoGene %>% separate(col = V9,sep = ";",into =  c("geneID1", "geneName1"))
knitr::opts_chunk$set(echo = TRUE)
#BiocManager::install("clusterProfiler")
#BiocManager::install("org.Dm.eg.db")
#install.packages("ggrepel")
#install.packages("kableExtra")
#install.packages("heatmap3")
#install.packages("tsne")
#install.packages("umap")
library(umap)
library(clusterProfiler)
library(org.Dm.eg.db)
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(heatmap3)
library(ggrepel)
library(tsne)
# Loading the gtf file to extract annotation.
gtfFile = paste(params$workingDir, "Drosophila_melanogaster.BDGP6.28.101.gtf", sep = "/")
gtfInfo = read.table(file = gtfFile, header = F, sep = "\t", quote = "", stringsAsFactors = F)
gtfInfo = read.table(file = gtfFile, header = F, sep = "\t", quote = "", stringsAsFactors = F)
# Chosing only the annotation for genes
gtfInfoGene = gtfInfo %>% dplyr::filter(V3 == "gene")
# Extract only gene name and geneID
gtfInfoGene = gtfInfoGene[grep(pattern = "gene_biotype \"protein_coding\"",x = gtfInfoGene$V9 ),  ]
View(gtfInfo)
gtfInfoGene= gtfInfoGene %>% separate(col = V9,sep = ";",into =  c("geneID1", "geneName1", "the_rest"))
# Extract only gene name and geneID
gtfInfoGene = gtfInfoGene[grep(pattern = "gene_biotype \"protein_coding\"",x = gtfInfoGene$V9 ),  ]
gtfInfoGene= gtfInfoGene %>% separate(col = V9,sep = ";",into =  c("geneID1", "geneName1", 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
gtfInfo = read.table(file = gtfFile, header = F, sep = "\t", quote = "", stringsAsFactors = F)
# Chosing only the annotation for genes
gtfInfoGene = gtfInfo %>% dplyr::filter(V3 == "gene")
# Extract only gene name and geneID
gtfInfoGene = gtfInfoGene[grep(pattern = "gene_biotype \"protein_coding\"",x = gtfInfoGene$V9 ),  ]
gtfInfoGene= gtfInfoGene %>% separate(col = V9,sep = ";",into =  c("geneID1", "geneName1", 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
# Chosing only the annotation for genes
gtfInfoGene = gtfInfo %>% dplyr::filter(V3 == "gene")
View(gtfInfo)
gtfInfoGene$V9
# Extract only gene name and geneID
gtfInfoGene = gtfInfoGene[grep(pattern = "gene_biotype \"protein_coding\"",x = gtfInfoGene$V9 ),  ]
gtfInfoGene= gtfInfoGene %>% separate(col = V9,sep = ";",into =  c("geneID1", "geneName1", 1,2))
# Chosing only the annotation for genes
gtfInfoGene = gtfInfo %>% dplyr::filter(V3 == "gene")
# Extract only gene name and geneID
gtfInfoGene = gtfInfoGene[grep(pattern = "gene_biotype \"protein_coding\"",x = gtfInfoGene$V9 ),  ]
gtfInfoGene= gtfInfoGene %>% separate(col = V9,sep = ";",into =  c("geneID1", "geneName1", 1,2, 3))
gtfInfoGene= gtfInfoGene %>% separate(col = geneID1,sep = "\"",into =  c("irrelevant", "geneID"))
# Chosing only the annotation for genes
gtfInfoGene = gtfInfo %>% dplyr::filter(V3 == "gene")
# Extract only gene name and geneID
gtfInfoGene = gtfInfoGene[grep(pattern = "gene_biotype \"protein_coding\"",x = gtfInfoGene$V9 ),  ]
gtfInfoGene
# Chosing only the annotation for genes
gtfInfoGene = gtfInfo %>% dplyr::filter(V3 == "gene")
# Extract only gene name and geneID
gtfInfoGene = gtfInfoGene[grep(pattern = "gene_biotype \"protein_coding\"",x = gtfInfoGene$V9 ),  ]
gtfInfoGene= gtfInfoGene %>% separate(col = V9,sep = ";",into =  c("geneID1", "geneName1", "gene_source", "gene_biotype"))
View(gtfInfoGene)
# Chosing only the annotation for genes
gtfInfoGene = gtfInfo %>% dplyr::filter(V3 == "gene")
# Extract only gene name and geneID
gtfInfoGene = gtfInfoGene[grep(pattern = "gene_biotype \"protein_coding\"",x = gtfInfoGene$V9 ),  ]
gtfInfoGene= gtfInfoGene %>% separate(col = V9,sep = ";",into =  c("geneID1", "geneName1", "gene_source", "gene_biotype", 4))
View(gtfInfoGene)
# Chosing only the annotation for genes
gtfInfoGene = gtfInfo %>% dplyr::filter(V3 == "gene")
# Extract only gene name and geneID
gtfInfoGene = gtfInfoGene[grep(pattern = "gene_biotype \"protein_coding\"",x = gtfInfoGene$V9 ),  ]
gtfInfoGene= gtfInfoGene %>% separate(col = V9,sep = ";",into =  c("geneID1", "geneName1", "gene_source", "gene_biotype", "empty"))
View(gtfInfoGene)
gtfInfoGene= gtfInfoGene %>% separate(col = geneID1,sep = "\"",into =  c("irrelevant", "geneID"))
# Chosing only the annotation for genes
gtfInfoGene = gtfInfo %>% dplyr::filter(V3 == "gene")
# Extract only gene name and geneID
gtfInfoGene = gtfInfoGene[grep(pattern = "gene_biotype \"protein_coding\"",x = gtfInfoGene$V9 ),  ]
gtfInfoGene= gtfInfoGene %>% separate(col = V9,sep = ";",into =  c("geneID1", "geneName1", "gene_source", "gene_biotype", "empty"))
gtfInfoGene= gtfInfoGene %>% separate(col = geneID1,sep = "\"",into =  c("irrelevant", "geneID", "empty"))
gtfInfoGene= gtfInfoGene %>% separate(col = geneName1,sep = "\"",into =  c("irrelevant1", "geneName", "empty"))
gtfInfoAnnotation = gtfInfoGene  %>% dplyr::select(V1,V4,V5,V7,geneID,geneName)
# Summerize the information in a table with Chr, start, stop, direction,
PROseqGenes = gtfInfoAnnotation %>% dplyr::rename("Chr"= V1, "GeneStart" = V4,"GeneStop" = V5,"geneDir" = V7)
PROseqGenes$Chr = paste ("chr",PROseqGenes$Chr, sep ="")
View(PROseqGenes)
View(gtfInfoAnnotation)
View(gtfInfoGene)
View(gtfInfoGene)
# The command below is needed to be able to knit a file
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#BiocManager::install("DESeq2")
#install.packages("RColorBrewer")
#BiocManager::install("clusterProfiler")
#BiocManager::install("org.Dm.eg.db")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
# Load the installed packages
library(clusterProfiler)
library(org.Dm.eg.db)
library(DESeq2)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
# Loading the count tsv file that contains the read count for each gene
featureCountFile = paste(params$workingDir, params$dataDir, "counts.CDS.txt", sep = "/")
FCdata = read.table(
file = featureCountFile,
header = TRUE,
sep = "\t",
quote = "",
stringsAsFactors = FALSE
)
# Creating matrix with geneID(1) and gene length(2)
geneInfo  = FCdata [, 1:6]
geneInfo  = geneInfo[, c(1, 6)]
# Creating matrix for the countdata, geneID and count for each sample
countData = FCdata[,-1:-6]
rownames(countData) = geneInfo$Geneid
#Extract the information about the samples from the sampleName.
#Save sampleName, mutant, time, replicate and name of the bam file.
sampleInfo = data.frame(bamFile =  colnames(countData))
sampleInfo = sampleInfo %>% separate(
col = bamFile,
sep = "\\.",
into =  c("dir", "mutant", "sampleInfo"),
remove = FALSE
)
sampleInfo = sampleInfo %>% separate(
col = sampleInfo,
sep = "_",
into =  c("irrelevant", "time", "replicate")
)
sampleInfo = sampleInfo %>% separate(col = mutant,
sep = "_",
into =  c("mutant"))
sampleInfo = sampleInfo %>% dplyr::select(bamFile, mutant, time, replicate)
sampleInfo = sampleInfo %>% unite("sampleName", mutant:time:replicate, remove = FALSE)
sampleInfo = sampleInfo %>% dplyr::select(bamFile, sampleName, mutant, time, replicate)
# Create a table and set rownames as samplename and rows as samplename, mutant, time, replicate and bamfile name.
rownames(sampleInfo) = sampleInfo$bamFile
sampleInfo = sampleInfo[colnames(countData),]
colnames(countData) = sampleInfo$sampleName
rownames(sampleInfo) = sampleInfo$sampleName
sampleInfo = sampleInfo %>% dplyr::select(sampleName, mutant, time, replicate, bamFile)
# Logaritmize the counts
geneExpression = log(rowSums(countData))
geneInfo$logExpression = log(rowSums(countData))
# Filter out all genes with no expression(counts = 0 --> log(count)=1)
geneInfo.QC = geneInfo %>% filter(logExpression > 1)
# Save only the count data with genes with expression
countData.QC =  countData[geneInfo.QC$Geneid, ]
knownGenes = read.table(
file = paste(
params$workingDir,
params$informationDir,
"FlyBase_IDs.txt",
sep = "/"
),
sep = "\t",
header = F,
quote = "",
stringsAsFactors = F
)
View(knownGenes)
# The command below is needed to be able to knit a file
knitr::opts_chunk$set(echo = TRUE)
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
library(org.Dm.eg.db)
library(org.Dm.eg.db)
library(DESeq2)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
# The command below is needed to be able to knit a file
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#BiocManager::install("DESeq2")
#install.packages("RColorBrewer")
#BiocManager::install("clusterProfiler")
#BiocManager::install("org.Dm.eg.db")
#install.packages("tidyverse")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
# Load the installed packages
library(clusterProfiler)
library(org.Dm.eg.db)
library(DESeq2)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
# Loading the count tsv file that contains the read count for each gene
featureCountFile = paste(params$workingDir, params$dataDir, "counts.CDS.txt", sep = "/")
FCdata = read.table(
file = featureCountFile,
header = TRUE,
sep = "\t",
quote = "",
stringsAsFactors = FALSE
)
# Creating matrix with geneID(1) and gene length(2)
geneInfo  = FCdata [, 1:6]
geneInfo  = geneInfo[, c(1, 6)]
# Creating matrix for the countdata, geneID and count for each sample
countData = FCdata[,-1:-6]
rownames(countData) = geneInfo$Geneid
#Extract the information about the samples from the sampleName.
#Save sampleName, mutant, time, replicate and name of the bam file.
sampleInfo = data.frame(bamFile =  colnames(countData))
sampleInfo = sampleInfo %>% separate(
col = bamFile,
sep = "\\.",
into =  c("dir", "mutant", "sampleInfo"),
remove = FALSE
)
sampleInfo = sampleInfo %>% separate(
col = sampleInfo,
sep = "_",
into =  c("irrelevant", "time", "replicate")
)
sampleInfo = sampleInfo %>% separate(col = mutant,
sep = "_",
into =  c("mutant"))
sampleInfo = sampleInfo %>% dplyr::select(bamFile, mutant, time, replicate)
sampleInfo = sampleInfo %>% unite("sampleName", mutant:time:replicate, remove = FALSE)
sampleInfo = sampleInfo %>% dplyr::select(bamFile, sampleName, mutant, time, replicate)
# Create a table and set rownames as samplename and rows as samplename, mutant, time, replicate and bamfile name.
rownames(sampleInfo) = sampleInfo$bamFile
sampleInfo = sampleInfo[colnames(countData),]
colnames(countData) = sampleInfo$sampleName
rownames(sampleInfo) = sampleInfo$sampleName
sampleInfo = sampleInfo %>% dplyr::select(sampleName, mutant, time, replicate, bamFile)
# Logaritmize the counts
geneExpression = log(rowSums(countData))
geneInfo$logExpression = log(rowSums(countData))
# Filter out all genes with no expression(counts = 0 --> log(count)=1)
geneInfo.QC = geneInfo %>% filter(logExpression > 1)
# Save only the count data with genes with expression
countData.QC =  countData[geneInfo.QC$Geneid, ]
knownGenes = read.table(
file = paste(
params$workingDir,
params$informationDir,
"FlyBase_IDs.txt",
sep = "/"
),
sep = "\t",
header = F,
quote = "",
stringsAsFactors = F
)
# Add name for the columns since the header was removed in the previous command
colnames(knownGenes) = c("Submitted ID", "Current ID", "Converted ID", "Related record")
# Set default value for the known gene as no
geneInfo.QC$knownGene = "No"
# Change value to yes if the geneID exist in the FlyBase database
geneInfo.QC$knownGene[geneInfo.QC$Geneid %in% knownGenes$`Current ID`] = "Yes"
# Change filenames
test = sampleInfo["toll10b_5h_rep1", ]
sampleInfo["toll10b_5h_rep1", ] = sampleInfo["gd7_5h_rep1", ]
sampleInfo["gd7_5h_rep1", ] = test
colnames(countData) = sampleInfo$sampleName
sampleInfo.QC  = sampleInfo
sampleInfo.QC$sampleName = rownames(sampleInfo)
sampleInfo.QC %>% select(sampleName, bamFile) %>% separate(
col = sampleName,
sep = "_",
into =  c("mutant", "time", "replicate"),
remove = FALSE
)
sampleInfo.QC %>%
kable() %>%
kable_styling()
#Save the corrected count data and sample info
exp.data = countData.QC
metaInfo = sampleInfo.QC
metaInfo$mutant = as.factor(metaInfo$mutant)
metaInfo$time = as.factor(metaInfo$time)
dds <- DESeqDataSetFromMatrix(countData = exp.data,
colData = metaInfo,
design = ~ time + mutant)
#Remove rows with low counts and normalise samples for visualisation
dds <- dds[rowSums(counts(dds)) > 100, ]
dim(dds)
#Normalizing and change to 2 fold log changes.
rld <- rlog(dds)
# Merging the information of the log fold changes and the meta data
normExpression = as.data.frame(assay(rld))
normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather(key = sampleName, value = rlog,-geneID)
normExpressionDF = inner_join(normExpressionDF, sampleInfo.QC, by = "sampleName")
# Plotting the density(how many genes) of the rlog values.
ggplot(normExpressionDF,
aes(
x = rlog,
color = sampleName,
linetype = time
)) + geom_density()
# Summerizes statistical information in geneInfo.
geneInfo = normExpressionDF %>% dplyr::select(geneID, rlog, sampleName) %>%
dplyr::group_by (geneID) %>%
dplyr::summarize (
min = min(rlog),
max = max(rlog),
mean = mean(rlog),
sd = sd(rlog),
#Creates a column which tells you how many counts(reads) are above 5 per geneID.
overQC = length(which(rlog > 5))
)
# Requires the gene has at least 2 counts that have a log fold change over 5
geneInfo.QC2 = geneInfo %>% filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>% filter(geneID %in% geneInfo.QC2$geneID)
ggplot(normExpressionDF.QC, aes(
x = rlog,
color = mutant,
linetype = time
)) + geom_density()
normExpression.QC = normExpressionDF.QC %>%
dplyr::select(geneID, sampleName, rlog) %>%
spread(key = sampleName, value = rlog)
rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[,-1]
# This is a function defined in ExpressionAnalysisFunctions.r
plotSample2SampleDistance(normExpression.QC)
#'  __Figure 1 Plotting sample to sample distance__ .
mir.pca <- prcomp(t(normExpression.QC), center = TRUE, scale = FALSE)
e.var = (mir.pca[['sdev']]^2 / sum(mir.pca[['sdev']]^2))
e.var = as.data.frame( e.var )
e.var$PC = as.factor(1:nrow(e.var))
e.var$Variance = e.var$e.var*100
e.var$CumulativeVariance = cumsum(e.var$Variance)
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
#'  __Figure 2 Plotting PCA variance__.
#'  Displays how much each of the PC contributes to the overall expression.
#'  This suggest that the two first PC explains most of the variation.
pctable = as.data.frame(mir.pca$x)[, 1:6]
pctable$sampleName = rownames(pctable)
pctable = inner_join(pctable, metaInfo)
pca  = plotPCAplot(PCAinfo = pctable, n.comp = 5,
varianceInfo = e.var,
colorComponent = "mutant",
pchComponent = "time"
)
pca
#ggsave("PCA_analysis.pdf")
loadings = mir.pca$rotation[,1:3]
mean = pctable %>% dplyr::select(PC1,PC2,PC3,mutant) %>%
dplyr::group_by(mutant) %>%
dplyr::summarise(PC1 = mean(PC1) ,PC2 = mean(PC2), PC3 = mean(PC3) )
meantime = pctable %>% dplyr::select(PC1,PC2,PC3,time) %>%
dplyr::group_by(time) %>%
dplyr::summarise(PC1 = mean(PC1) ,PC2 = mean(PC2), PC3 = mean(PC3) )
origo = data.frame(PC1=0, PC2 = 0, PC3 = 0)
line.gd7 = rbind(mean[1,2:4],origo,-mean[1,2:4])
line.gd7$factor = "Gd7"
line.toll10b = rbind(mean[2,2:4],origo,-mean[2,2:4])
line.toll10b$factor = "Toll10b"
line.toll9 = rbind(mean[3,2:4],origo,-mean[3,2:4])
line.toll9$factor = "Toll9"
line.time = rbind(meantime[2,2:4],origo,meantime[1,2:4])
line.time$factor = "Time"
line = rbind(line.gd7,line.toll10b,line.toll9,line.time)
pctable$factor  = pctable$mutant
pctable$factor =  recode(pctable$factor, gd7 = "Gd7")
pctable$factor =  recode(pctable$factor, toll9 = "Toll9")
pctable$factor =  recode(pctable$factor, toll10b = "Toll10b")
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
test
ggplot(line, mapping = aes(x = PC2,y = PC3, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC2,y = PC3, color = factor, shape = time))+
scale_color_viridis(discrete = TRUE, option = "D")
ggplot(line, mapping = aes(x = PC1,y = PC2, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC1,y = PC2, color = factor, shape = time))+
scale_color_viridis(discrete = TRUE, option = "D")
sampleInfoFile = paste(params$workingDir, params$resultsDir,"sampleInfo.QC.tab.txt", sep = "/")
write.table(x = sampleInfo.QC, file = sampleInfoFile, quote = F, sep =  "\t", row.names = F,col.names = T)
geneTableFile = paste(params$workingDir, params$resultsDir,"gene.QC.tab.txt", sep = "/")
write.table(x = geneInfo.QC, file = geneTableFile, quote = F, sep =  "\t", row.names = F, col.names = T)
countTableFile = paste(params$workingDir, params$resultsDir,"counts.QC.tab.txt", sep = "/")
write.table(x = countData.QC, file = countTableFile, quote = F, sep =  "\t", row.names = T, col.names = T)
rlogTableFile = paste(params$workingDir, params$resultsDir,"rlog.QC.tab.txt", sep = "/")
write.table(x = normExpression.QC, file = rlogTableFile, quote = F, sep =  "\t", row.names = T, col.names = T)
# The kmeans analysis requires the columns: (PROseqdata) geneID,factor, direction, annotation,annotation2, Time, Gd7,Toll10b,Toll9 and (annotation2) geneID, annotation, distance, factor, direction" from the PROseq.data.tsv file
# The PROseq.data.tsv file has the headers: geneID	factor	direction	annotation	PC1	PC2	PC3	distance	Gd7	Time	Toll10b	Toll9	annotation2	sampleName	rlog	mutant	time	replicate	bamFile	transcriptID	ppcCount	gbcCount	Chr	Start	End	Strand	Length	PI	GBClog	PPClog
# pctable contains: PC1-6, samplename, mutant, time, replicate, bamfile, factor
View(countData)
View(countData)
View(pctable)
View(geneInfo.QC2)
View(geneInfo.QC)
View(normExpression)
View(normExpression.QC)
