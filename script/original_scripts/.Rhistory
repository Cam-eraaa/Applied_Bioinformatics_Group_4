sampleInfo$Genotype = recode(sampleInfo$Genotype, Toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, `Toll9/10` = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")
# Filter out the sampleInfo that is not ATACseq
sampleInfo = sampleInfo %>% filter(Assaytype == params$Method)
#sampleInfoCountTable = data.frame(bamFiles2 = colnames(countData))
#sampleInfo = inner_join(sampleInfo, sampleInfoCountTable)
countData = countData[, sampleInfo$bamFiles2]
sampleInfo$Nuclearcycle[is.na(sampleInfo$Nuclearcycle)] = "Mutant"
colnames(countData) = sampleInfo$SampleInfo
fixedSamples = sampleInfo$SampleInfo[grep(pattern = "Fixed", x = sampleInfo$SampleInfo)]
spikedSamples = sampleInfo$SampleInfo[grep(pattern = "spiked", x = sampleInfo$SampleInfo)]
sampleInfo_Mutants = sampleInfo %>% filter(Nuclearcycle == "Mutant") %>%
filter(!SampleInfo %in% fixedSamples) %>%
filter(!SampleInfo %in% spikedSamples)
countData_mutants = countData[, sampleInfo_Mutants$SampleInfo]
exp.data = countData_mutants
metaInfo = sampleInfo_Mutants
rownames(metaInfo) = sampleInfo_Mutants$SampleInfo
metaInfo$Antibody = as.factor(metaInfo$Antibody)
metaInfo$Genotype = as.factor(metaInfo$Genotype)
dds <- DESeqDataSetFromMatrix(countData = exp.data,
colData = metaInfo,
design = ~Genotype )
#Remove rows with low counts and normalise samples for visualisation
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#Normalizing and change to 2 fold log changes.
rld <- rlog(dds)
normExpression = as.data.frame(assay(rld))
normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleName, value = rlog, -geneID)
#normExpressionDF = inner_join(normExpressionDF, sampleInfo)
ggplot(normExpressionDF, aes(x = rlog, color = sampleName)) + geom_density()
geneInfo = normExpressionDF %>%
dplyr::select(geneID, rlog, sampleName) %>%
dplyr::group_by (geneID) %>%
dplyr::summarize ( min = min(rlog),
max = max(rlog),
mean = mean(rlog),
sd = sd(rlog),
overQC = length(which(rlog > 5))
)
geneInfo.QC2 = geneInfo %>%
filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>%
filter(geneID %in% geneInfo.QC2$geneID)
ggplot(normExpressionDF.QC, aes(x = rlog, color = sampleName)) + geom_density()
normExpression.QC = normExpressionDF.QC %>%
dplyr::select(geneID, sampleName, rlog) %>%
spread(key = sampleName, value = rlog)
rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]
View(normExpressionDF.QC)
View(normExpressionDF)
View(normExpression.QC)
normExpression.QC = normExpression[peakInfo_QC$geneID, sampleInfo_Mutants$SampleInfo]
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
library(tidyverse)
library(gplots)
library(kableExtra)
library(DESeq2)
library("viridis")
# Read in the ATACseq count data
featureCountFile = paste(params$workingDir, params$dataDir,params$count_ATAC, sep = "/")
FCdata = read.table( file = featureCountFile, header = TRUE, sep = "\t", quote = "", stringsAsFactors = FALSE)
# Save the columns with info in peak info
peakInfo  = FCdata [,1:6]
# Save the count data info in table countData
countData = FCdata[,-1:-6]
# Change row names to geneID which is saved in peakInfo
rownames(countData) = peakInfo$Geneid
# Load the sample data
sampleInfoFile = paste(params$workingDir, params$sampleInfo, sep = "/")
sampleInfo = read.table(
file = sampleInfoFile,
header = TRUE,
sep = "\t",
quote = "",
stringsAsFactors = FALSE
)
sampleInfo$bamFiles2  =  gsub(pattern = "/",
replacement = ".",
x = sampleInfo$bamFiles)
sampleInfo$bamFiles2  =  gsub(pattern = "-",
replacement = ".",
x = sampleInfo$bamFiles2)
# Rename the mutants in sampledata so that the names are universal for the data
sampleInfo$Genotype = recode(sampleInfo$Genotype, Toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, `Toll9/10` = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")
# Filter out the sampleInfo that is not ATACseq
sampleInfo = sampleInfo %>% filter(Assaytype == params$Method)
#sampleInfoCountTable = data.frame(bamFiles2 = colnames(countData))
#sampleInfo = inner_join(sampleInfo, sampleInfoCountTable)
countData = countData[, sampleInfo$bamFiles2]
sampleInfo$Nuclearcycle[is.na(sampleInfo$Nuclearcycle)] = "Mutant"
colnames(countData) = sampleInfo$SampleInfo
fixedSamples = sampleInfo$SampleInfo[grep(pattern = "Fixed", x = sampleInfo$SampleInfo)]
spikedSamples = sampleInfo$SampleInfo[grep(pattern = "spiked", x = sampleInfo$SampleInfo)]
sampleInfo_Mutants = sampleInfo %>% filter(Nuclearcycle == "Mutant") %>%
filter(!SampleInfo %in% fixedSamples) %>%
filter(!SampleInfo %in% spikedSamples)
countData_mutants = countData[, sampleInfo_Mutants$SampleInfo]
exp.data = countData_mutants
metaInfo = sampleInfo_Mutants
rownames(metaInfo) = sampleInfo_Mutants$SampleInfo
metaInfo$Antibody = as.factor(metaInfo$Antibody)
metaInfo$Genotype = as.factor(metaInfo$Genotype)
dds <- DESeqDataSetFromMatrix(countData = exp.data,
colData = metaInfo,
design = ~Genotype )
#Remove rows with low counts and normalise samples for visualisation
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#Normalizing and change to 2 fold log changes.
rld <- rlog(dds)
normExpression = as.data.frame(assay(rld))
normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleName, value = rlog, -geneID)
#normExpressionDF = inner_join(normExpressionDF, sampleInfo)
ggplot(normExpressionDF, aes(x = rlog, color = sampleName)) + geom_density()
geneInfo = normExpressionDF %>%
dplyr::select(geneID, rlog, sampleName) %>%
dplyr::group_by (geneID) %>%
dplyr::summarize ( min = min(rlog),
max = max(rlog),
mean = mean(rlog),
sd = sd(rlog),
overQC = length(which(rlog > 5))
)
geneInfo.QC2 = geneInfo %>%
filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>%
filter(geneID %in% geneInfo.QC2$geneID)
ggplot(normExpressionDF.QC, aes(x = rlog, color = sampleName)) + geom_density()
normExpression.QC = normExpressionDF.QC %>%
dplyr::select(geneID, sampleName, rlog) %>%
spread(key = sampleName, value = rlog)
rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]
peakInfo_QC = peakInfo %>%
dplyr::rename(geneID = Geneid) %>%
inner_join(geneInfo.QC2)
countData.QC = countData_mutants[peakInfo_QC$geneID,
sampleInfo_Mutants$SampleInfo]
normExpression.QC = normExpression[peakInfo_QC$geneID, sampleInfo_Mutants$SampleInfo]
normExpression.QC = normExpression.QC[, -1]
View(normExpression)
View(normExpression.QC)
normExpression.QC = normExpression[peakInfo_QC$geneID, sampleInfo_Mutants$SampleInfo]
View(normExpression.QC)
normExpression.QC = normExpression.QC[, -1]
normExpression.QC = normExpression[peakInfo_QC$geneID, sampleInfo_Mutants$SampleInfo]
NormalisedCountFile
## Saving normalised count file
NormalisedCountFile = paste(
params$workingDir,
params$resultsDir,
paste(params$normalisedATACpeakData, sep = "."),
sep = "/"
)
NormalisedCountFile
knitr::opts_chunk$set(echo = TRUE)
# Load the functions script (for plotting)
source(
paste(
params$workingDir,
params$RscriptsDir,
"ExpressionAnalysisFunctions.r",
sep = "/"
)
)
# Load the required packages
library(tidyverse)
library(gplots)
library(kableExtra)
library(DESeq2)
library("viridis")
# Load the sample info
sampleInfoFile = paste(params$workingDir, params$ATACresultsDir, params$ATACSampleInfo,
sep = "/")
sampleInfo = read.table(sampleInfoFile,
header = TRUE,
sep = "\t",
quote = "",
stringsAsFactors = FALSE
)
# Load the rlog values
normexpression_file = paste(params$workingDir,
params$ATACresultsDir,
params$normalisedATACpeakData,
sep = "/")
normExpression.QC = read.table(
normexpression_file,
header = TRUE,
sep = "\t",
quote = "",
stringsAsFactors = FALSE
)
# Read in the ATACseq count data
featureCountFile = paste(params$workingDir, params$dataDir, params$count_ATAC, sep = "/")
FCdata = read.table( file = featureCountFile, header = TRUE, sep = "\t", quote = "", stringsAsFactors = FALSE)
# Save the columns with info in peak info
peakInfo  = FCdata [,1:6]
# Load the PROseq data
proseq_file = paste(params$workingDir, params$PROseq.data, sep ="/")
PROseq.data = read.table(file = proseq_file, header = TRUE, sep="\t", quote="", stringsAsFactors = FALSE)
plotSample2SampleDistance(normExpression.QC)
#'  __Figure 1 Plotting sample to sample distance__ .
#'  0 means that they are identical and 1 means that they are totally different.
#'  The darker the blue the more similar. Also dendogram shows how similar they are.
#'
#' Samples do not cluster according to pre an post op. Most likely more due to difference in mapping (technical problem)
#'
#' #### PCA analysis
#' Running PCA on the samples and plotting the different variables to see which of the parameters that fit the different components the best.
#'
#' First checking how much the different PC contribute.
# Principal component analysis
mir.pca <- prcomp(t(normExpression.QC), center = TRUE, scale = FALSE)
e.var = (mir.pca[['sdev']]^2 / sum(mir.pca[['sdev']]^2))
e.var = as.data.frame( e.var )
e.var$PC = as.factor(1:nrow(e.var))
e.var$Variance = e.var$e.var*100
e.var$CumulativeVariance = cumsum(e.var$Variance)
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
#'  __Figure 2 Plotting PCA variance__.
#'  Displays how much each of the PC contributes to the overall expression.
#'  This suggest that the two first PC explains most of the variation.
#'
#+ save2, include=FALSE
#ggsave(paste(params$workingDirectory,params$resultsDirectory, "PCAvariance.png", sep = "/"))
#'
#'
# Save the loading scores from the PCA
pctable = as.data.frame(mir.pca$x)[, 1:5]
# Merge the loading scores with
pctable = cbind(pctable, sampleInfo)
test  = plotPCAplot(PCAinfo = pctable, n.comp = 4,
varianceInfo = e.var,
colorComponent = "Genotype",pchComponent = "Time"
)
test
mean = pctable %>% dplyr::select(PC1,PC2,PC3,Genotype) %>%
dplyr::group_by(Genotype) %>%
dplyr::summarise(PC1 = mean(PC1) ,PC2 = mean(PC2), PC3 = mean(PC3) )
meantime = pctable %>% dplyr::select(PC1,PC2,PC3,Time) %>%
dplyr::group_by(Time) %>%
dplyr::summarise(PC1 = mean(PC1) ,PC2 = mean(PC2), PC3 = mean(PC3) )
origo = data.frame(PC1=0,PC2=0, PC3 = 0)
line.gd7 = rbind(mean[1,2:4],origo,-mean[1,2:4])
line.gd7$factor = "Gd7"
line.toll10b = rbind(mean[2,2:4],origo,-mean[2,2:4])
line.toll10b$factor = "Toll10B"
line.toll9 = rbind(mean[3,2:4],origo,-mean[3,2:4])
line.toll9$factor = "Toll9"
line.time = rbind(-meantime[1,2:4],origo,meantime[1,2:4])
line.time$factor = "Time"
line = rbind(line.gd7,line.toll10b,line.toll9)
ggplot(line, mapping = aes(x = PC2,y = PC3, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC2,y = PC3, color = Genotype, shape = Time))
ggplot(line, mapping = aes(x = PC1,y = PC2, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC1,y = PC2, color = Genotype, shape = Time))
ggplot(line, mapping = aes(x = PC1,y = PC3, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC1,y = PC3, color = Genotype, shape = Time))
# Saves the loading scores for PC1-PC3
line = rbind(line.gd7,line.toll10b,line.toll9, line.time)
loadings =mir.pca$rotation[,1:3]
# Converts the loading values by subtracting the column(PC) mean and dividing by the column(PC) standard deviation. The columns needs to be transposed to rows to calculate and are then transposed back to columns
loadings_norm = as.data.frame(t((t(loadings)-colMeans(loadings))/colSds(loadings)))
loadings_norm$Geneid = rownames(loadings)
loadings_new = loadings_norm
dist3d(b =as.numeric(line[1,]),
c = as.numeric(line1[3,]),
point = as.numeric(loadings_norm[i,1:3]))
dist3d(b =as.numeric(line[1,]),
c = as.numeric(line[3,]),
point = as.numeric(loadings_norm[i,1:3]))
i = 1
dist3d(b =as.numeric(line[1,]),
c = as.numeric(line[3,]),
point = as.numeric(loadings_norm[i,1:3]))
for(j in unique(line$factor)){
loadings_new[[j]]=0
for(i in 1:nrow(loadings_norm)){
line1 = line %>% dplyr::filter(factor == j) %>% dplyr::select(PC1,PC2,PC3)
loadings_new[i,j] = dist3d(b =as.numeric(line1[1,]),
c = as.numeric(line1[3,]),
point = as.numeric(loadings_norm[i,1:3]))
}
}
# Install required packages
install.packages("kableExtra")
install.packages("tidyverse")
install.packages("RColorBrewer")
install.packages("BiocManager")
install.packages("pheatmap")
install.packages("GGally")
BiocManager::install("DESeq2")
BiocManager::install("edgeR")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.r",sep = "/"))
# Load the installed packages
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(RColorBrewer)
library(DESeq2)
library(DESeq2)
library(edgeR)
library("pheatmap")
# Load the installed packages
library(clusterProfiler)
# Install required packages
#BiocManager::install("DESeq2")
#install.packages("RColorBrewer")
BiocManager::install("clusterProfiler")
# Install required packages
#BiocManager::install("DESeq2")
#install.packages("RColorBrewer")
#BiocManager::install("clusterProfiler")
BiocManager::install("org.Dm.eg.db")
# Load the installed packages
library(clusterProfiler)
# Load the installed packages
library(clusterProfiler)
library(org.Dm.eg.db)
library(DESeq2)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
# Loading the count tsv file that contains the read count for each gene
featureCountFile = paste(params$workingDir, params$dataDir, "counts.CDS.txt", sep = "/")
FCdata = read.table(
file = featureCountFile,
header = TRUE,
sep = "\t",
quote = "",
stringsAsFactors = FALSE
)
# Creating matrix with geneID(1) and gene length(2)
geneInfo  = FCdata [, 1:6]
geneInfo  = geneInfo[, c(1, 6)]
# Creating matrix for the countdata, geneID and count for each sample
countData = FCdata[,-1:-6]
rownames(countData) = geneInfo$Geneid
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
library(tidyverse)
library(gplots)
library(kableExtra)
library(DESeq2)
library("viridis")
# Read in the ATACseq count data
featureCountFile = paste(params$workingDir, params$dataDir,params$count_ATAC, sep = "/")
FCdata = read.table( file = featureCountFile, header = TRUE, sep = "\t", quote = "", stringsAsFactors = FALSE)
# Save the columns with info in peak info
peakInfo  = FCdata [,1:6]
# Save the count data info in table countData
countData = FCdata[,-1:-6]
# Change row names to geneID which is saved in peakInfo
rownames(countData) = peakInfo$Geneid
# Load the sample data
sampleInfoFile = paste(params$workingDir, params$sampleInfo, sep = "/")
sampleInfo = read.table(
file = sampleInfoFile,
header = TRUE,
sep = "\t",
quote = "",
stringsAsFactors = FALSE
)
#Change the names of bamFiles2 so that they make more sense
sampleInfo$bamFiles2  =  gsub(pattern = "/",
replacement = ".",
x = sampleInfo$bamFiles)
sampleInfo$bamFiles2  =  gsub(pattern = "-",
replacement = ".",
x = sampleInfo$bamFiles2)
# Rename the mutants in sampledata so that the names are universal for the data
sampleInfo$Genotype = recode(sampleInfo$Genotype, Toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, `Toll9/10` = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")
# Filter out the sampleInfo that is not ATACseq
sampleInfo = sampleInfo %>% filter(Assaytype == params$Method)
#sampleInfoCountTable = data.frame(bamFiles2 = colnames(countData))
#sampleInfo = inner_join(sampleInfo, sampleInfoCountTable)
#Make sure that the columns in countData is the same as the name of the bamfiles2 in sampleInfo
countData = countData[, sampleInfo$bamFiles2]
#Change NA in sampleinfo$uclearsample to Mutant
sampleInfo$Nuclearcycle[is.na(sampleInfo$Nuclearcycle)] = "Mutant"
#Rename the columns in countData
colnames(countData) = sampleInfo$SampleInfo
#Divide sampleInfo into fixed and spiked samples.
fixedSamples = sampleInfo$SampleInfo[grep(pattern = "Fixed", x = sampleInfo$SampleInfo)]
spikedSamples = sampleInfo$SampleInfo[grep(pattern = "spiked", x = sampleInfo$SampleInfo)]
#Create sampleInfo_Mutants with only mutants and that are not in either fixed or spiked
sampleInfo_Mutants = sampleInfo %>% filter(Nuclearcycle == "Mutant") %>%
filter(!SampleInfo %in% fixedSamples) %>%
filter(!SampleInfo %in% spikedSamples)
#Create a count data table from these
countData_mutants = countData[, sampleInfo_Mutants$SampleInfo]
#Cretae expression data and meta data and fix rownames
exp.data = countData_mutants
metaInfo = sampleInfo_Mutants
rownames(metaInfo) = sampleInfo_Mutants$SampleInfo
#Create factor values
metaInfo$Antibody = as.factor(metaInfo$Antibody)
metaInfo$Genotype = as.factor(metaInfo$Genotype)
#Create a DESeq data set from exp.data and metaInfo
dds <- DESeqDataSetFromMatrix(countData = exp.data,
colData = metaInfo,
design = ~Genotype )
#Remove rows with low counts and normalize samples for visualization
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#Transform the count data in the DESeq data frame to the log2 scale which minimizes differences between samples for rows with small counts, and which normalizes with respect to library size
rld <- rlog(dds)
#Put this normalized data into a data frame
normExpression = as.data.frame(assay(rld))
#Create a normalized expression data frame
normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleName, value = rlog, -geneID)
#normExpressionDF = inner_join(normExpressionDF, sampleInfo)
#Plot and color by sampleName
ggplot(normExpressionDF, aes(x = rlog, color = sampleName)) + geom_density()
#
geneInfo = normExpressionDF %>%
dplyr::select(geneID, rlog, sampleName) %>%
dplyr::group_by (geneID) %>%
dplyr::summarize ( min = min(rlog),
max = max(rlog),
mean = mean(rlog),
sd = sd(rlog),
overQC = length(which(rlog > 5))
)
#Filter out overQC values under 2
geneInfo.QC2 = geneInfo %>%
filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>%
filter(geneID %in% geneInfo.QC2$geneID)
#Plot again after filtering
ggplot(normExpressionDF.QC, aes(x = rlog, color = sampleName)) + geom_density()
#Create normExpression.QC with samples as columns and rows by geneID and values or rlog
normExpression.QC = normExpressionDF.QC %>%
dplyr::select(geneID, sampleName, rlog) %>%
spread(key = sampleName, value = rlog)
rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]
plotSample2SampleDistance(normExpression.QC)
#'  __Figure 1 Plotting sample to sample distance__ .
#'  0 means that they are identical and 1 means that they are totally different.
#'  The darker the blue the more similair. Also dendogram shows how similair they are.
#'
#' Samples do not cluster according to pre an post op. Most likely more due to difference in mapping (technical problem)
#'
#' #### PCA analysis
#' Running PCA on the samples and plotting the different variables to see which of the parameterrs that fit the different components the best.
#'
#' First checking how much the different PC contribute.
mir.pca <- prcomp(t(normExpression.QC), center = TRUE, scale = FALSE)
e.var = (mir.pca[['sdev']]^2 / sum(mir.pca[['sdev']]^2))
e.var = as.data.frame( e.var )
e.var$PC = as.factor(1:nrow(e.var))
e.var$Variance = e.var$e.var*100
e.var$CumulativeVariance = cumsum(e.var$Variance)
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
#'  __Figure 2 Plotting PCA variance__.
#'  Displays how much each of the PC contributes to the overall expression.
#'  This suggest that the two first PC explains most of the variation.
#'
#+ save2, include=FALSE
#ggsave(paste(params$workingDirectory,params$resultsDirectory, "PCAvariance.png", sep = "/"))
#'
#'
pctable = as.data.frame(mir.pca$x)[, 1:5]
pctable = cbind(pctable, sampleInfo_Mutants)
test  = plotPCAplot(PCAinfo = pctable, n.comp = 4,
varianceInfo = e.var,
colorComponent = "Genotype",pchComponent = "Time"
)
test
mean = pctable %>% dplyr::select(PC1,PC2,PC3,Genotype) %>%
dplyr::group_by(Genotype) %>%
dplyr::summarise(PC1 = mean(PC1) ,PC2 = mean(PC2), PC3 = mean(PC3) )
# Extracting distances from PC2 and PC3
origo = data.frame(PC2=0, PC3 = 0)
line.gd7 = rbind(mean[1,3:4],origo,-mean[1,3:4])
line.gd7$factor = "Gd7"
line.toll10b = rbind(mean[2,3:4],origo,-mean[2,3:4])
line.toll10b$factor = "Toll10b"
line.toll9 = rbind(mean[3,3:4],origo,-mean[3,3:4])
line.toll9$factor = "Toll9"
line = rbind(line.gd7,line.toll10b,line.toll9)
ggplot(line, mapping = aes(x = PC2,y = PC3, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC2,y = PC3, color = Genotype, shape = Time))
