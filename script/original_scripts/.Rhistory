sampleInfo.QC  = sampleInfo
sampleInfo.QC$sampleName = rownames(sampleInfo)
sampleInfo.QC %>% select(sampleName, bamFile) %>% separate(col = sampleName,sep = "_",into =  c("mutant", "time","replicate"), remove = FALSE)
sampleInfo.QC %>%
kable() %>%
kable_styling()
exp.data = countData.QC
metaInfo = sampleInfo.QC
metaInfo$mutant = as.factor(metaInfo$mutant)
metaInfo$time = as.factor(metaInfo$time)
dds <- DESeqDataSetFromMatrix(countData = exp.data,
colData = metaInfo,
design = ~time + mutant )
#Remove rows with low counts and normalise samples for visualisation
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#Normalizing and change to 2 fold log changes.
rld <- rlog(dds)
normExpression = as.data.frame(assay(rld))
head(normExpression)
normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleName, value = rlog, -geneID)
normExpressionDF = inner_join(normExpressionDF, sampleInfo.QC)
ggplot(normExpressionDF, aes(x = rlog, color = sampleName, linetype = time)) + geom_density()
geneInfo = normExpressionDF %>% dplyr::select(geneID, rlog, sampleName) %>%
dplyr::group_by (geneID) %>%
dplyr::summarize ( min = min(rlog), max = max(rlog), mean = mean(rlog), sd = sd(rlog), overQC = length(which(rlog > 5)) )
geneInfo.QC2 = geneInfo %>% filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>% filter(geneID %in% geneInfo.QC2$geneID)
ggplot(normExpressionDF.QC, aes(x = rlog, color = mutant, linetype = time)) + geom_density()
normExpression.QC = normExpressionDF.QC %>%
dplyr::select(geneID, sampleName, rlog) %>%
spread(key = sampleName, value = rlog)
rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]
plotSample2SampleDistance(normExpression.QC)
#'  __Figure 1 Plotting sample to sample distance__ .
mir.pca <- prcomp(t(normExpression.QC), center = TRUE, scale = FALSE)
e.var = (mir.pca[['sdev']]^2 / sum(mir.pca[['sdev']]^2))
e.var = as.data.frame( e.var )
e.var$PC = as.factor(1:nrow(e.var))
e.var$Variance = e.var$e.var*100
e.var$CumulativeVariance = cumsum(e.var$Variance)
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
#'  __Figure 2 Plotting PCA variance__.
#'  Displays how much each of the PC contributes to the overall expression.
#'  This suggest that the two first PC explains most of the variation.
#'
#+ save2, include=FALSE
#ggsave(paste(params$workingDirectory,params$proSeqDirectory, "PCAvariance.png", sep = "/"))
#'
#'
pctable = as.data.frame(mir.pca$x)[, 1:6]
pctable$sampleName = rownames(pctable)
pctable = inner_join(pctable, metaInfo)
test  = plotPCAplot(PCAinfo = pctable, n.comp = 5,
varianceInfo = e.var,
colorComponent = "mutant",
pchComponent = "time"
)
test
#ggsave("PCA_analysis.pdf")
loadings = mir.pca$rotation[,1:3]
mean = pctable %>% dplyr::select(PC1,PC2,PC3,mutant) %>%
dplyr::group_by(mutant) %>%
dplyr::summarise(PC1 = mean(PC1) ,PC2 = mean(PC2), PC3 = mean(PC3) )
meantime = pctable %>% dplyr::select(PC1,PC2,PC3,time) %>%
dplyr::group_by(time) %>%
dplyr::summarise(PC1 = mean(PC1) ,PC2 = mean(PC2), PC3 = mean(PC3) )
origo = data.frame(PC1=0, PC2 = 0, PC3 = 0)
line.gd7 = rbind(mean[1,2:4],origo,-mean[1,2:4])
line.gd7$factor = "Gd7"
line.toll10b = rbind(mean[2,2:4],origo,-mean[2,2:4])
line.toll10b$factor = "Toll10b"
line.toll9 = rbind(mean[3,2:4],origo,-mean[3,2:4])
line.toll9$factor = "Toll9"
line.time = rbind(meantime[2,2:4],origo,meantime[1,2:4])
line.time$factor = "Time"
line = rbind(line.gd7,line.toll10b,line.toll9,line.time)
pctable$factor  = pctable$mutant
pctable$factor =  recode(pctable$factor, gd7 = "Gd7")
pctable$factor =  recode(pctable$factor, toll9 = "Toll9")
pctable$factor =  recode(pctable$factor, toll10b = "Toll10b")
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
test
ggplot(line, mapping = aes(x = PC2,y = PC3, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC2,y = PC3, color = factor, shape = time))+
scale_color_viridis(discrete = TRUE, option = "D")
ggplot(line, mapping = aes(x = PC1,y = PC2, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC1,y = PC2, color = factor, shape = time))+
scale_color_viridis(discrete = TRUE, option = "D")
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
#BiocManager::install("DESeq2")
#BiocManager::install("edgeR")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.r",sep = "/"))
# Load the installed packages
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(RColorBrewer)
library(DESeq2)
library(edgeR)
featureCountFile = paste(params$workingDir, params$dataDir, params$chipSeqData, sep = "/")
FCdata = read.table( file = featureCountFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
peakInfoLocation  = FCdata [,1:6] %>% dplyr::rename(geneID = Geneid)
countData = FCdata[,-1:-6]
rownames(countData) = peakInfoLocation$geneID
sampleInfoFile =paste(params$workingDir, params$sampleInfo, sep = "/")
sampleInfo = read.table( file = sampleInfoFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
sampleInfo$bamFiles2  =  gsub(pattern = "/",replacement = ".",x = sampleInfo$bamFiles)
sampleInfo$bamFiles2  =  gsub(pattern = "-",replacement = ".",x = sampleInfo$bamFiles2)
sampleInfo$Genotype = recode(sampleInfo$Genotype, Toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")
sampleInfo =sampleInfo %>% filter(Antibody == params$Antibody)
sampleInfoCountTable = data.frame(bamFiles2 = colnames(countData))
sampleInfo = inner_join(sampleInfo,sampleInfoCountTable)
countData = countData[,sampleInfo$bamFiles2]
colnames(countData) = paste(sampleInfo$Genotype, sampleInfo$Replicate, sep = "_")
sampleInfo$sampleID = paste(sampleInfo$Genotype, sampleInfo$Replicate, sep = "_")
exp.data = countData
metaInfo = sampleInfo
rownames(metaInfo) = sampleInfo$sampleID
metaInfo$Genotype = as.factor(metaInfo$Genotype)
metaInfo$sampleID = as.factor(metaInfo$sampleID)
dds <- DESeqDataSetFromMatrix(countData = exp.data,
colData = metaInfo, ~1)
#Remove rows with low counts and normalise samples for visualisation
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#Normalizing and change to 2 fold log changes.
rld <- rlog(dds)
normExpression = as.data.frame(assay(rld))
normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleID, value = rlog, -geneID)
normExpressionDF = inner_join(normExpressionDF, metaInfo)
#normExpressionDF = inner_join(normExpressionDF, sampleInfo)
ggplot(normExpressionDF, aes(x = rlog)) + geom_density()
peakInfo = normExpressionDF %>% dplyr::select(geneID, rlog, sampleID) %>%
dplyr::group_by (geneID) %>%
dplyr::summarize ( min = min(rlog), max = max(rlog), mean = mean(rlog), sd = sd(rlog), overQC = length(which(rlog > 5)) )
peakInfo.QC = peakInfo %>% filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>% filter(geneID %in% peakInfo.QC$geneID)
ggplot(normExpressionDF.QC, aes(x = rlog, color = sampleID)) + geom_density()
normExpression.QC = normExpressionDF.QC%>%
dplyr::select(geneID, sampleID, rlog) %>%
spread(key = sampleID, value = rlog)
rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]
plotSample2SampleDistance(normExpression.QC)
mir.pca <- prcomp(t(normExpression.QC), center = TRUE, scale = FALSE)
e.var = (mir.pca[['sdev']]^2 / sum(mir.pca[['sdev']]^2))
e.var = as.data.frame( e.var )
e.var$PC = as.factor(1:nrow(e.var))
e.var$Variance = e.var$e.var*100
e.var$CumulativeVariance = cumsum(e.var$Variance)
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
pctable = as.data.frame(mir.pca$x)[, 1:5]
pctable$sampleID = rownames(pctable)
pctable = inner_join(pctable, metaInfo)
test  = plotPCAplot(PCAinfo = pctable, n.comp = 4,
varianceInfo = e.var,
colorComponent = "Genotype",pchComponent = "Replicate"
)
test
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
#BiocManager::install("DESeq2")
#BiocManager::install("edgeR")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.r",sep = "/"))
# Load the installed packages
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(RColorBrewer)
library(DESeq2)
library(edgeR)
featureCountFile = paste(params$workingDir, params$dataDir, params$chipSeqData, sep = "/")
FCdata = read.table(file = featureCountFile, header = TRUE, sep = "\t", quote = "", stringsAsFactors = FALSE)
peakInfo  = FCdata [,1:6]
countData = FCdata[,-1:-6]
rownames(countData) = peakInfo$Geneid
samples = colnames(countData)
samples = gsub(pattern = "..CBP_ChIP_seq_mapped.CBP_toll_dm6only.bam_dm6.", replacement = "", x = samples)
samples = gsub(pattern = ".dm6.bowtie2.sorted.bam", replacement = "", x = samples)
colnames(countData) = samples
sampleInfo = data.frame(sampleName = colnames(countData), sampleInfo = samples, stringsAsFactors = F)
sampleInfo= sampleInfo %>% separate(sampleInfo, c("Genotype", "Replicate", "Input", "sample"), sep = "_", remove = F)
sampleInfo$Genotype = recode(sampleInfo$Genotype, toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")
sampleInfo$Genotype = recode(sampleInfo$Genotype, toll10B = "Toll10b")
sampleInfo$sampleID = paste(sampleInfo$Genotype, sampleInfo$Replicate, sampleInfo$Input , sep = "_")
countData = countData[,sampleInfo$sampleName]
colnames(countData) = sampleInfo$sampleID
exp.data = countData
metaInfo = sampleInfo
rownames(metaInfo) = sampleInfo$sampleID
metaInfo$Genotype = as.factor(metaInfo$Genotype)
metaInfo$sampleID = as.factor(metaInfo$sampleID)
metaInfo$Input = as.factor(metaInfo$Input)
dds <- DESeqDataSetFromMatrix(countData = exp.data,
colData = metaInfo, ~1)
#Remove rows with low counts and normalise samples for visualisation
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#Normalizing and change to 2 fold log changes.
test2 =   rpkm(countData, gene.length = peakInfo$Length)
plotSample2SampleDistance(test2)
rld <- rlog(dds)
normExpression = as.data.frame(assay(rld))
normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleID, value = rlog, -geneID)
normExpressionDF = inner_join(normExpressionDF, metaInfo)
head(normExpressionDF)
#normExpressionDF = inner_join(normExpressionDF, sampleInfo)
ggplot(normExpressionDF, aes(x = rlog, color = Input)) + geom_density()
peakInfo = normExpressionDF %>% dplyr::select(geneID, rlog, sampleName) %>%
dplyr::group_by (geneID) %>%
dplyr::summarize ( min = min(rlog), max = max(rlog), mean = mean(rlog), sd = sd(rlog), overQC = length(which(rlog > 5)) )
peakInfo.QC = peakInfo %>% filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>% filter(geneID %in% peakInfo.QC$geneID)
ggplot(normExpressionDF.QC, aes(x = rlog, color = sampleName)) + geom_density()
normExpressionDF.QC.CBP = normExpressionDF.QC %>% filter(Input == params$Antibody)
normExpression.QC = normExpressionDF.QC.CBP %>%
dplyr::select(geneID, sampleName, rlog) %>%
spread(key = sampleName, value = rlog)
rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]
plotSample2SampleDistance(normExpression.QC)
mir.pca <- prcomp(t(normExpression.QC), center = TRUE, scale = FALSE)
e.var = (mir.pca[['sdev']]^2 / sum(mir.pca[['sdev']]^2))
e.var = as.data.frame( e.var )
e.var$PC = as.factor(1:nrow(e.var))
e.var$Variance = e.var$e.var*100
e.var$CumulativeVariance = cumsum(e.var$Variance)
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
pctable = as.data.frame(mir.pca$x)[, 1:5]
pctable$sampleName = rownames(pctable)
pctable = inner_join(pctable, metaInfo)
test  = plotPCAplot(PCAinfo = pctable, n.comp = 4,
varianceInfo = e.var,
colorComponent = "Genotype",pchComponent = "Replicate"
)
test
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
library(tidyverse)
library(gplots)
library(kableExtra)
library(DESeq2)
library("viridis")
featureCountFile = paste(params$workingDir, params$dataDir,params$count_ATAC, sep = "/")
FCdata = read.table( file = featureCountFile, header = TRUE, sep = "\t", quote = "", stringsAsFactors = FALSE)
peakInfo  = FCdata [,1:6]
countData = FCdata[,-1:-6]
rownames(countData) = peakInfo$Geneid
sampleInfoFile =paste(params$workingDir, params$sampleInfo, sep = "/")
sampleInfo = read.table( file = sampleInfoFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
sampleInfo$bamFiles2  =  gsub(pattern = "/",replacement = ".",x = sampleInfo$bamFiles)
sampleInfo$bamFiles2  =  gsub(pattern = "-",replacement = ".",x = sampleInfo$bamFiles2)
sampleInfo$Genotype = recode(sampleInfo$Genotype, Toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, `Toll9/10` = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")
sampleInfo =sampleInfo %>% filter(Assaytype == params$Method)
sampleInfoCountTable = data.frame(bamFiles2 = colnames(countData))
sampleInfo = inner_join(sampleInfo,sampleInfoCountTable)
countData = countData[,sampleInfo$bamFiles2]
sampleInfo$Nuclearcycle[is.na(sampleInfo$Nuclearcycle)]="Mutant"
colnames(countData) = sampleInfo$SampleInfo
fixedSamples = sampleInfo$SampleInfo[grep(pattern = "Fixed", x = sampleInfo$SampleInfo)]
spikedSamples = sampleInfo$SampleInfo[grep(pattern = "spiked", x = sampleInfo$SampleInfo)]
sampleInfo_Mutants = sampleInfo %>% filter( Nuclearcycle == "Mutant" ) %>%
filter(!SampleInfo %in% fixedSamples) %>%
filter(!SampleInfo %in% spikedSamples)
countData_mutants = countData[,sampleInfo_Mutants$SampleInfo  ]
exp.data = countData_mutants
metaInfo = sampleInfo_Mutants
rownames(metaInfo) = sampleInfo_Mutants$SampleInfo
metaInfo$Antibody = as.factor(metaInfo$Antibody)
metaInfo$Genotype = as.factor(metaInfo$Genotype)
dds <- DESeqDataSetFromMatrix(countData = exp.data,
colData = metaInfo,
design = ~Genotype )
#Remove rows with low counts and normalise samples for visualisation
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#Normalizing and change to 2 fold log changes.
rld <- rlog(dds)
normExpression = as.data.frame(assay(rld))
head(normExpression)
normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleName, value = rlog, -geneID)
#normExpressionDF = inner_join(normExpressionDF, sampleInfo)
ggplot(normExpressionDF, aes(x = rlog, color = sampleName)) + geom_density()
geneInfo = normExpressionDF %>%
dplyr::select(geneID, rlog, sampleName) %>%
dplyr::group_by (geneID) %>%
dplyr::summarize ( min = min(rlog),
max = max(rlog),
mean = mean(rlog),
sd = sd(rlog),
overQC = length(which(rlog > 5))
)
geneInfo.QC2 = geneInfo %>%
filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>%
filter(geneID %in% geneInfo.QC2$geneID)
ggplot(normExpressionDF.QC, aes(x = rlog, color = sampleName)) + geom_density()
normExpression.QC = normExpressionDF.QC %>%
dplyr::select(geneID, sampleName, rlog) %>%
spread(key = sampleName, value = rlog)
rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]
plotSample2SampleDistance(normExpression.QC)
#'  __Figure 1 Plotting sample to sample distance__ .
#'  0 means that they are identical and 1 means that they are totally different.
#'  The darker the blue the more similair. Also dendogram shows how similair they are.
#'
#' Samples do not cluster according to pre an post op. Most likely more due to difference in mapping (technical problem)
#'
#' #### PCA analysis
#' Running PCA on the samples and plotting the different variables to see which of the parameterrs that fit the different components the best.
#'
#' First checking how much the different PC contribute.
mir.pca <- prcomp(t(normExpression.QC), center = TRUE, scale = FALSE)
e.var = (mir.pca[['sdev']]^2 / sum(mir.pca[['sdev']]^2))
e.var = as.data.frame( e.var )
e.var$PC = as.factor(1:nrow(e.var))
e.var$Variance = e.var$e.var*100
e.var$CumulativeVariance = cumsum(e.var$Variance)
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
#'  __Figure 2 Plotting PCA variance__.
#'  Displays how much each of the PC contributes to the overall expression.
#'  This suggest that the two first PC explains most of the variation.
#'
#+ save2, include=FALSE
#ggsave(paste(params$workingDirectory,params$resultsDirectory, "PCAvariance.png", sep = "/"))
#'
#'
pctable = as.data.frame(mir.pca$x)[, 1:5]
pctable = cbind(pctable, sampleInfo_Mutants)
test  = plotPCAplot(PCAinfo = pctable, n.comp = 4,
varianceInfo = e.var,
colorComponent = "Genotype",pchComponent = "Time"
)
test
mean = pctable %>% dplyr::select(PC1,PC2,PC3,Genotype) %>%
dplyr::group_by(Genotype) %>%
dplyr::summarise(PC1 = mean(PC1) ,PC2 = mean(PC2), PC3 = mean(PC3) )
origo = data.frame(PC2=0, PC3 = 0)
line.gd7 = rbind(mean[1,3:4],origo,-mean[1,3:4])
line.gd7$factor = "Gd7"
line.toll10b = rbind(mean[2,3:4],origo,-mean[2,3:4])
line.toll10b$factor = "Toll10b"
line.toll9 = rbind(mean[3,3:4],origo,-mean[3,3:4])
line.toll9$factor = "Toll9"
line = rbind(line.gd7,line.toll10b,line.toll9)
ggplot(line, mapping = aes(x = PC2,y = PC3, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC2,y = PC3, color = Genotype, shape = Time))
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
library(tidyverse)
library(gplots)
library(kableExtra)
library(DESeq2)
library("viridis")
featureCountFile = paste(params$workingDir, params$dataDir,params$count_ATAC, sep = "/")
FCdata = read.table( file = featureCountFile, header = TRUE, sep = "\t", quote = "", stringsAsFactors = FALSE)
peakInfo  = FCdata [,1:6]
countData = FCdata[,-1:-6]
rownames(countData) = peakInfo$Geneid
sampleInfoFile =paste(params$workingDir, params$sampleInfo, sep = "/")
sampleInfo = read.table( file = sampleInfoFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
sampleInfo$bamFiles2  =  gsub(pattern = "/",replacement = ".",x = sampleInfo$bamFiles)
sampleInfo$bamFiles2  =  gsub(pattern = "-",replacement = ".",x = sampleInfo$bamFiles2)
sampleInfo$Genotype = recode(sampleInfo$Genotype, Toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, `Toll9/10` = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")
sampleInfo =sampleInfo %>% filter(Assaytype == params$Method)
sampleInfoCountTable = data.frame(bamFiles2 = colnames(countData))
sampleInfo = inner_join(sampleInfo,sampleInfoCountTable)
countData = countData[,sampleInfo$bamFiles2]
sampleInfo$Nuclearcycle[is.na(sampleInfo$Nuclearcycle)]="Mutant"
colnames(countData) = sampleInfo$SampleInfo
fixedSamples = sampleInfo$SampleInfo[grep(pattern = "Fixed", x = sampleInfo$SampleInfo)]
spikedSamples = sampleInfo$SampleInfo[grep(pattern = "spiked", x = sampleInfo$SampleInfo)]
sampleInfo_Mutants = sampleInfo %>% filter( Nuclearcycle == "Mutant" ) %>%
filter(!SampleInfo %in% fixedSamples) %>%
filter(!SampleInfo %in% spikedSamples)
countData_mutants = countData[,sampleInfo_Mutants$SampleInfo  ]
exp.data = countData_mutants
metaInfo = sampleInfo_Mutants
rownames(metaInfo) = sampleInfo_Mutants$SampleInfo
metaInfo$Antibody = as.factor(metaInfo$Antibody)
metaInfo$Genotype = as.factor(metaInfo$Genotype)
dds <- DESeqDataSetFromMatrix(countData = exp.data,
colData = metaInfo,
design = ~Genotype )
#Remove rows with low counts and normalise samples for visualisation
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#Normalizing and change to 2 fold log changes.
rld <- rlog(dds)
normExpression = as.data.frame(assay(rld))
head(normExpression)
normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleName, value = rlog, -geneID)
#normExpressionDF = inner_join(normExpressionDF, sampleInfo)
ggplot(normExpressionDF, aes(x = rlog, color = sampleName)) + geom_density()
geneInfo = normExpressionDF %>%
dplyr::select(geneID, rlog, sampleName) %>%
dplyr::group_by (geneID) %>%
dplyr::summarize ( min = min(rlog),
max = max(rlog),
mean = mean(rlog),
sd = sd(rlog),
overQC = length(which(rlog > 5))
)
geneInfo.QC2 = geneInfo %>%
filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>%
filter(geneID %in% geneInfo.QC2$geneID)
ggplot(normExpressionDF.QC, aes(x = rlog, color = sampleName)) + geom_density()
normExpression.QC = normExpressionDF.QC %>%
dplyr::select(geneID, sampleName, rlog) %>%
spread(key = sampleName, value = rlog)
rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]
plotSample2SampleDistance(normExpression.QC)
#'  __Figure 1 Plotting sample to sample distance__ .
#'  0 means that they are identical and 1 means that they are totally different.
#'  The darker the blue the more similair. Also dendogram shows how similair they are.
#'
#' Samples do not cluster according to pre an post op. Most likely more due to difference in mapping (technical problem)
#'
#' #### PCA analysis
#' Running PCA on the samples and plotting the different variables to see which of the parameterrs that fit the different components the best.
#'
#' First checking how much the different PC contribute.
mir.pca <- prcomp(t(normExpression.QC), center = TRUE, scale = FALSE)
e.var = (mir.pca[['sdev']]^2 / sum(mir.pca[['sdev']]^2))
e.var = as.data.frame( e.var )
e.var$PC = as.factor(1:nrow(e.var))
e.var$Variance = e.var$e.var*100
e.var$CumulativeVariance = cumsum(e.var$Variance)
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
#'  __Figure 2 Plotting PCA variance__.
#'  Displays how much each of the PC contributes to the overall expression.
#'  This suggest that the two first PC explains most of the variation.
#'
#+ save2, include=FALSE
#ggsave(paste(params$workingDirectory,params$resultsDirectory, "PCAvariance.png", sep = "/"))
#'
#'
pctable = as.data.frame(mir.pca$x)[, 1:5]
pctable = cbind(pctable, sampleInfo_Mutants)
test  = plotPCAplot(PCAinfo = pctable, n.comp = 4,
varianceInfo = e.var,
colorComponent = "Genotype",pchComponent = "Time"
)
test
mean = pctable %>% dplyr::select(PC1,PC2,PC3,Genotype) %>%
dplyr::group_by(Genotype) %>%
dplyr::summarise(PC1 = mean(PC1) ,PC2 = mean(PC2), PC3 = mean(PC3) )
origo = data.frame(PC2=0, PC3 = 0)
line.gd7 = rbind(mean[1,3:4],origo,-mean[1,3:4])
line.gd7$factor = "Gd7"
line.toll10b = rbind(mean[2,3:4],origo,-mean[2,3:4])
line.toll10b$factor = "Toll10b"
line.toll9 = rbind(mean[3,3:4],origo,-mean[3,3:4])
line.toll9$factor = "Toll9"
line = rbind(line.gd7,line.toll10b,line.toll9)
ggplot(line, mapping = aes(x = PC2,y = PC3, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC2,y = PC3, color = Genotype, shape = Time))
