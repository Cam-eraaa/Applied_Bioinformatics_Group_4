#+ save2, include=FALSE
#ggsave(paste(params$workingDirectory,params$resultsDirectory, "PCAvariance.png", sep = "/"))
#'
#'
pctable = as.data.frame(mir.pca$x)[, 1:5]
pctable = cbind(pctable, sampleInfo_Mutants)
test  = plotPCAplot(PCAinfo = pctable, n.comp = 4,
varianceInfo = e.var,
colorComponent = "Genotype",pchComponent = "Time"
)
test
mean = pctable %>% dplyr::select(PC1,PC2,PC3,Genotype) %>%
dplyr::group_by(Genotype) %>%
dplyr::summarise(PC1 = mean(PC1) ,PC2 = mean(PC2), PC3 = mean(PC3) )
origo = data.frame(PC2=0, PC3 = 0)
line.gd7 = rbind(mean[1,3:4],origo,-mean[1,3:4])
line.gd7$factor = "Gd7"
line.toll10b = rbind(mean[2,3:4],origo,-mean[2,3:4])
line.toll10b$factor = "Toll10b"
line.toll9 = rbind(mean[3,3:4],origo,-mean[3,3:4])
line.toll9$factor = "Toll9"
line = rbind(line.gd7,line.toll10b,line.toll9)
ggplot(line, mapping = aes(x = PC2,y = PC3, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC2,y = PC3, color = Genotype, shape = Time))
loadings =mir.pca$rotation[,1:3]
loadings
loadings1 = as.data.frame(t((t(loadings)-colMeans(loadings))/colSds(loadings)))
View(loadings1)
View(loadings)
View(loadings1)
as.data.frame(t((t(loadings)-colMeans(loadings))/colSds(loadings)))
as.data.frame(t((t(loadings)-colMeans(loadings))/colSds(loadings)))
x = as.data.frame(t((t(loadings)-colMeans(loadings))/colSds(loadings)))
View(x)
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
library(tidyverse)
library(gplots)
library(kableExtra)
library(DESeq2)
library("viridis")
featureCountFile = paste(params$workingDir, params$dataDir,params$count_ATAC, sep = "/")
FCdata = read.table( file = featureCountFile, header = TRUE, sep = "\t", quote = "", stringsAsFactors = FALSE)
peakInfo  = FCdata [,1:6]
countData = FCdata[,-1:-6]
rownames(countData) = peakInfo$Geneid
sampleInfoFile =paste(params$workingDir, params$sampleInfo, sep = "/")
sampleInfo = read.table( file = sampleInfoFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
sampleInfo$bamFiles2  =  gsub(pattern = "/",replacement = ".",x = sampleInfo$bamFiles)
sampleInfo$bamFiles2  =  gsub(pattern = "-",replacement = ".",x = sampleInfo$bamFiles2)
sampleInfo$Genotype = recode(sampleInfo$Genotype, Toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, `Toll9/10` = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")
sampleInfo =sampleInfo %>% filter(Assaytype == params$Method)
sampleInfoCountTable = data.frame(bamFiles2 = colnames(countData))
sampleInfo = inner_join(sampleInfo,sampleInfoCountTable)
countData = countData[,sampleInfo$bamFiles2]
sampleInfo$Nuclearcycle[is.na(sampleInfo$Nuclearcycle)]="Mutant"
colnames(countData) = sampleInfo$SampleInfo
fixedSamples = sampleInfo$SampleInfo[grep(pattern = "Fixed", x = sampleInfo$SampleInfo)]
spikedSamples = sampleInfo$SampleInfo[grep(pattern = "spiked", x = sampleInfo$SampleInfo)]
sampleInfo_Mutants = sampleInfo %>% filter( Nuclearcycle == "Mutant" ) %>%
filter(!SampleInfo %in% fixedSamples) %>%
filter(!SampleInfo %in% spikedSamples)
countData_mutants = countData[,sampleInfo_Mutants$SampleInfo  ]
exp.data = countData_mutants
metaInfo = sampleInfo_Mutants
rownames(metaInfo) = sampleInfo_Mutants$SampleInfo
metaInfo$Antibody = as.factor(metaInfo$Antibody)
metaInfo$Genotype = as.factor(metaInfo$Genotype)
dds <- DESeqDataSetFromMatrix(countData = exp.data,
colData = metaInfo,
design = ~Genotype )
#Remove rows with low counts and normalise samples for visualisation
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#Normalizing and change to 2 fold log changes.
rld <- rlog(dds)
normExpression = as.data.frame(assay(rld))
normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleName, value = rlog, -geneID)
#normExpressionDF = inner_join(normExpressionDF, sampleInfo)
ggplot(normExpressionDF, aes(x = rlog, color = sampleName)) + geom_density()
geneInfo = normExpressionDF %>%
dplyr::select(geneID, rlog, sampleName) %>%
dplyr::group_by (geneID) %>%
dplyr::summarize ( min = min(rlog),
max = max(rlog),
mean = mean(rlog),
sd = sd(rlog),
overQC = length(which(rlog > 5))
)
geneInfo.QC2 = geneInfo %>%
filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>%
filter(geneID %in% geneInfo.QC2$geneID)
ggplot(normExpressionDF.QC, aes(x = rlog, color = sampleName)) + geom_density()
normExpression.QC = normExpressionDF.QC %>%
dplyr::select(geneID, sampleName, rlog) %>%
spread(key = sampleName, value = rlog)
rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]
plotSample2SampleDistance(normExpression.QC)
#'  __Figure 1 Plotting sample to sample distance__ .
#'  0 means that they are identical and 1 means that they are totally different.
#'  The darker the blue the more similair. Also dendogram shows how similair they are.
#'
#' Samples do not cluster according to pre an post op. Most likely more due to difference in mapping (technical problem)
#'
#' #### PCA analysis
#' Running PCA on the samples and plotting the different variables to see which of the parameterrs that fit the different components the best.
#'
#' First checking how much the different PC contribute.
mir.pca <- prcomp(t(normExpression.QC), center = TRUE, scale = FALSE)
e.var = (mir.pca[['sdev']]^2 / sum(mir.pca[['sdev']]^2))
e.var = as.data.frame( e.var )
e.var$PC = as.factor(1:nrow(e.var))
e.var$Variance = e.var$e.var*100
e.var$CumulativeVariance = cumsum(e.var$Variance)
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
#'  __Figure 2 Plotting PCA variance__.
#'  Displays how much each of the PC contributes to the overall expression.
#'  This suggest that the two first PC explains most of the variation.
#'
#+ save2, include=FALSE
#ggsave(paste(params$workingDirectory,params$resultsDirectory, "PCAvariance.png", sep = "/"))
#'
#'
pctable = as.data.frame(mir.pca$x)[, 1:5]
pctable = cbind(pctable, sampleInfo_Mutants)
test  = plotPCAplot(PCAinfo = pctable, n.comp = 4,
varianceInfo = e.var,
colorComponent = "Genotype",pchComponent = "Time"
)
test
mean = pctable %>% dplyr::select(PC1,PC2,PC3,Genotype) %>%
dplyr::group_by(Genotype) %>%
dplyr::summarise(PC1 = mean(PC1) ,PC2 = mean(PC2), PC3 = mean(PC3) )
origo = data.frame(PC2=0, PC3 = 0)
line.gd7 = rbind(mean[1,3:4],origo,-mean[1,3:4])
line.gd7$factor = "Gd7"
line.toll10b = rbind(mean[2,3:4],origo,-mean[2,3:4])
line.toll10b$factor = "Toll10b"
line.toll9 = rbind(mean[3,3:4],origo,-mean[3,3:4])
line.toll9$factor = "Toll9"
line = rbind(line.gd7,line.toll10b,line.toll9)
ggplot(line, mapping = aes(x = PC2,y = PC3, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC2,y = PC3, color = Genotype, shape = Time))
loadings =mir.pca$rotation[,1:3]
loadings1 = as.data.frame(t((t(loadings)-colMeans(loadings))/colSds(loadings)))
loadings1$Geneid = rownames(loadings)
distance3d <- function(a,b){
v1 = a - b
distance = ((v1[[1]]^2 + v1[[2]]^2 + v1[[3]]^2)^0.5)
return(distance)
}
dist3d <- function(point,b,c) {
v1 <- b - c
v2 <- point - b
v3 <- cross3d_prod(v1,v2)
area <- sqrt(sum(v3*v3))/2
d <- 2*area/sqrt(sum(v1*v1))
return(d)
}
cross3d_prod <- function(v1,v2){
v3 <- vector()
v3[1] <- v1[2]*v2[3]-v1[3]*v2[2]
v3[2] <- v1[3]*v2[1]-v1[1]*v2[3]
v3[3] <- v1[1]*v2[2]-v1[2]*v2[1]
return(v3)
}
for(j in unique(line$factor)){
loadings1[[j]]=0
for(i in 1:nrow(loadings1)){
line1 = line %>% dplyr::filter(factor == j) %>% dplyr::select(PC1,PC2,PC3)
loadings1[i,j] = dist3d(b =as.numeric(line1[1,]),
c = as.numeric(line1[3,]),
point = as.numeric(loadings1[i,1:3]))
}
}
View(loadings1)
for(j in unique(line$factor)){
loadings1[[j]]=0
for(i in 1:nrow(loadings1)){
line1 = line %>% dplyr::filter(factor == j) %>% dplyr::select(PC1,PC2,PC3)
loadings1[i,j] = dist3d(b =as.numeric(line1[1,]),
c = as.numeric(line1[3,]),
point = as.numeric(loadings1[i,1:3]))
}
}
rlang::last_error()
View(line)
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
library(tidyverse)
library(gplots)
library(kableExtra)
library(DESeq2)
library("viridis")
featureCountFile = paste(params$workingDir, params$dataDir,params$count_ATAC, sep = "/")
FCdata = read.table( file = featureCountFile, header = TRUE, sep = "\t", quote = "", stringsAsFactors = FALSE)
peakInfo  = FCdata [,1:6]
countData = FCdata[,-1:-6]
rownames(countData) = peakInfo$Geneid
sampleInfoFile =paste(params$workingDir, params$sampleInfo, sep = "/")
sampleInfo = read.table( file = sampleInfoFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
sampleInfo$bamFiles2  =  gsub(pattern = "/",replacement = ".",x = sampleInfo$bamFiles)
sampleInfo$bamFiles2  =  gsub(pattern = "-",replacement = ".",x = sampleInfo$bamFiles2)
sampleInfo$Genotype = recode(sampleInfo$Genotype, Toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, `Toll9/10` = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")
sampleInfo =sampleInfo %>% filter(Assaytype == params$Method)
sampleInfoCountTable = data.frame(bamFiles2 = colnames(countData))
sampleInfo = inner_join(sampleInfo,sampleInfoCountTable)
countData = countData[,sampleInfo$bamFiles2]
sampleInfo$Nuclearcycle[is.na(sampleInfo$Nuclearcycle)]="Mutant"
colnames(countData) = sampleInfo$SampleInfo
fixedSamples = sampleInfo$SampleInfo[grep(pattern = "Fixed", x = sampleInfo$SampleInfo)]
spikedSamples = sampleInfo$SampleInfo[grep(pattern = "spiked", x = sampleInfo$SampleInfo)]
sampleInfo_Mutants = sampleInfo %>% filter( Nuclearcycle == "Mutant" ) %>%
filter(!SampleInfo %in% fixedSamples) %>%
filter(!SampleInfo %in% spikedSamples)
countData_mutants = countData[,sampleInfo_Mutants$SampleInfo  ]
exp.data = countData_mutants
metaInfo = sampleInfo_Mutants
rownames(metaInfo) = sampleInfo_Mutants$SampleInfo
metaInfo$Antibody = as.factor(metaInfo$Antibody)
metaInfo$Genotype = as.factor(metaInfo$Genotype)
dds <- DESeqDataSetFromMatrix(countData = exp.data,
colData = metaInfo,
design = ~Genotype )
#Remove rows with low counts and normalise samples for visualisation
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#Normalizing and change to 2 fold log changes.
rld <- rlog(dds)
normExpression = as.data.frame(assay(rld))
normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleName, value = rlog, -geneID)
#normExpressionDF = inner_join(normExpressionDF, sampleInfo)
ggplot(normExpressionDF, aes(x = rlog, color = sampleName)) + geom_density()
geneInfo = normExpressionDF %>%
dplyr::select(geneID, rlog, sampleName) %>%
dplyr::group_by (geneID) %>%
dplyr::summarize ( min = min(rlog),
max = max(rlog),
mean = mean(rlog),
sd = sd(rlog),
overQC = length(which(rlog > 5))
)
geneInfo.QC2 = geneInfo %>%
filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>%
filter(geneID %in% geneInfo.QC2$geneID)
ggplot(normExpressionDF.QC, aes(x = rlog, color = sampleName)) + geom_density()
normExpression.QC = normExpressionDF.QC %>%
dplyr::select(geneID, sampleName, rlog) %>%
spread(key = sampleName, value = rlog)
rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]
plotSample2SampleDistance(normExpression.QC)
#'  __Figure 1 Plotting sample to sample distance__ .
#'  0 means that they are identical and 1 means that they are totally different.
#'  The darker the blue the more similair. Also dendogram shows how similair they are.
#'
#' Samples do not cluster according to pre an post op. Most likely more due to difference in mapping (technical problem)
#'
#' #### PCA analysis
#' Running PCA on the samples and plotting the different variables to see which of the parameterrs that fit the different components the best.
#'
#' First checking how much the different PC contribute.
mir.pca <- prcomp(t(normExpression.QC), center = TRUE, scale = FALSE)
e.var = (mir.pca[['sdev']]^2 / sum(mir.pca[['sdev']]^2))
e.var = as.data.frame( e.var )
e.var$PC = as.factor(1:nrow(e.var))
e.var$Variance = e.var$e.var*100
e.var$CumulativeVariance = cumsum(e.var$Variance)
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
#'  __Figure 2 Plotting PCA variance__.
#'  Displays how much each of the PC contributes to the overall expression.
#'  This suggest that the two first PC explains most of the variation.
#'
#+ save2, include=FALSE
#ggsave(paste(params$workingDirectory,params$resultsDirectory, "PCAvariance.png", sep = "/"))
#'
#'
pctable = as.data.frame(mir.pca$x)[, 1:5]
pctable = cbind(pctable, sampleInfo_Mutants)
test  = plotPCAplot(PCAinfo = pctable, n.comp = 4,
varianceInfo = e.var,
colorComponent = "Genotype",pchComponent = "Time"
)
test
test
mean = pctable %>% dplyr::select(PC1,PC2,PC3,Genotype) %>%
dplyr::group_by(Genotype) %>%
dplyr::summarise(PC1 = mean(PC1) ,PC2 = mean(PC2), PC3 = mean(PC3) )
origo = data.frame(PC2=0, PC3 = 0)
origo = data.frame(PC2=0, PC3 = 0)
line.gd7 = rbind(mean[1,3:4],origo,-mean[1,3:4])
line.gd7$factor = "Gd7"
line.toll10b = rbind(mean[2,3:4],origo,-mean[2,3:4])
line.toll10b$factor = "Toll10b"
line.toll9 = rbind(mean[3,3:4],origo,-mean[3,3:4])
line.toll9$factor = "Toll9"
line = rbind(line.gd7,line.toll10b,line.toll9)
View(line)
View(line.gd7)
View(line.toll10b)
mean[1,3:4]
mean
-mean[1,3:4]
line.gd7 = rbind(mean[1,2,3:4],origo,-mean[1,2,3:4])
line.gd7
line.gd7 = rbind(mean[1:2,3:4],origo,-mean[1:2,3:4])
line.gd7$factor = "Gd7"
line.gd7
origo = data.frame(PC1=0,PC2=0, PC3 = 0)
line.gd7 = rbind(mean[1,3:4],origo,-mean[1,3:4])
line.gd7 = rbind(mean[1,2,3:4],origo,-mean[1,2,3:4])
line.gd7$factor = "Gd7"
line.gd7
origo = data.frame(PC1=0,PC2=0, PC3 = 0)
line.gd7 = rbind(mean[1,2:4],origo,-mean[1,2:4])
line.gd7$factor = "Gd7"
line.gd7
mean
line.gd7
line.toll10b
line
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
library(tidyverse)
library(gplots)
library(kableExtra)
library(DESeq2)
library("viridis")
featureCountFile = paste(params$workingDir, params$dataDir,params$count_ATAC, sep = "/")
FCdata = read.table( file = featureCountFile, header = TRUE, sep = "\t", quote = "", stringsAsFactors = FALSE)
peakInfo  = FCdata [,1:6]
countData = FCdata[,-1:-6]
rownames(countData) = peakInfo$Geneid
sampleInfoFile =paste(params$workingDir, params$sampleInfo, sep = "/")
sampleInfo = read.table( file = sampleInfoFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
sampleInfo$bamFiles2  =  gsub(pattern = "/",replacement = ".",x = sampleInfo$bamFiles)
sampleInfo$bamFiles2  =  gsub(pattern = "-",replacement = ".",x = sampleInfo$bamFiles2)
sampleInfo$Genotype = recode(sampleInfo$Genotype, Toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, `Toll9/10` = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")
sampleInfo =sampleInfo %>% filter(Assaytype == params$Method)
sampleInfoCountTable = data.frame(bamFiles2 = colnames(countData))
sampleInfo = inner_join(sampleInfo,sampleInfoCountTable)
countData = countData[,sampleInfo$bamFiles2]
sampleInfo$Nuclearcycle[is.na(sampleInfo$Nuclearcycle)]="Mutant"
colnames(countData) = sampleInfo$SampleInfo
fixedSamples = sampleInfo$SampleInfo[grep(pattern = "Fixed", x = sampleInfo$SampleInfo)]
spikedSamples = sampleInfo$SampleInfo[grep(pattern = "spiked", x = sampleInfo$SampleInfo)]
sampleInfo_Mutants = sampleInfo %>% filter( Nuclearcycle == "Mutant" ) %>%
filter(!SampleInfo %in% fixedSamples) %>%
filter(!SampleInfo %in% spikedSamples)
countData_mutants = countData[,sampleInfo_Mutants$SampleInfo  ]
exp.data = countData_mutants
metaInfo = sampleInfo_Mutants
rownames(metaInfo) = sampleInfo_Mutants$SampleInfo
metaInfo$Antibody = as.factor(metaInfo$Antibody)
metaInfo$Genotype = as.factor(metaInfo$Genotype)
dds <- DESeqDataSetFromMatrix(countData = exp.data,
colData = metaInfo,
design = ~Genotype )
#Remove rows with low counts and normalise samples for visualisation
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#Normalizing and change to 2 fold log changes.
rld <- rlog(dds)
normExpression = as.data.frame(assay(rld))
normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleName, value = rlog, -geneID)
#normExpressionDF = inner_join(normExpressionDF, sampleInfo)
ggplot(normExpressionDF, aes(x = rlog, color = sampleName)) + geom_density()
geneInfo = normExpressionDF %>%
dplyr::select(geneID, rlog, sampleName) %>%
dplyr::group_by (geneID) %>%
dplyr::summarize ( min = min(rlog),
max = max(rlog),
mean = mean(rlog),
sd = sd(rlog),
overQC = length(which(rlog > 5))
)
geneInfo.QC2 = geneInfo %>%
filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>%
filter(geneID %in% geneInfo.QC2$geneID)
ggplot(normExpressionDF.QC, aes(x = rlog, color = sampleName)) + geom_density()
normExpression.QC = normExpressionDF.QC %>%
dplyr::select(geneID, sampleName, rlog) %>%
spread(key = sampleName, value = rlog)
rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]
plotSample2SampleDistance(normExpression.QC)
#'  __Figure 1 Plotting sample to sample distance__ .
#'  0 means that they are identical and 1 means that they are totally different.
#'  The darker the blue the more similair. Also dendogram shows how similair they are.
#'
#' Samples do not cluster according to pre an post op. Most likely more due to difference in mapping (technical problem)
#'
#' #### PCA analysis
#' Running PCA on the samples and plotting the different variables to see which of the parameterrs that fit the different components the best.
#'
#' First checking how much the different PC contribute.
mir.pca <- prcomp(t(normExpression.QC), center = TRUE, scale = FALSE)
e.var = (mir.pca[['sdev']]^2 / sum(mir.pca[['sdev']]^2))
e.var = as.data.frame( e.var )
e.var$PC = as.factor(1:nrow(e.var))
e.var$Variance = e.var$e.var*100
e.var$CumulativeVariance = cumsum(e.var$Variance)
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
#'  __Figure 2 Plotting PCA variance__.
#'  Displays how much each of the PC contributes to the overall expression.
#'  This suggest that the two first PC explains most of the variation.
#'
#+ save2, include=FALSE
#ggsave(paste(params$workingDirectory,params$resultsDirectory, "PCAvariance.png", sep = "/"))
#'
#'
pctable = as.data.frame(mir.pca$x)[, 1:5]
pctable = cbind(pctable, sampleInfo_Mutants)
test  = plotPCAplot(PCAinfo = pctable, n.comp = 4,
varianceInfo = e.var,
colorComponent = "Genotype",pchComponent = "Time"
)
test
mean = pctable %>% dplyr::select(PC1,PC2,PC3,Genotype) %>%
dplyr::group_by(Genotype) %>%
dplyr::summarise(PC1 = mean(PC1) ,PC2 = mean(PC2), PC3 = mean(PC3) )
# Changes here to include PC1
origo = data.frame(PC1=0,PC2=0, PC3 = 0)
line.gd7 = rbind(mean[1,2:4],origo,-mean[1,2:4])
line.gd7$factor = "Gd7"
line.toll10b = rbind(mean[2,2:4],origo,-mean[2,2:4])
line.toll10b$factor = "Toll10b"
line.toll9 = rbind(mean[3,2:4],origo,-mean[3,2:4])
line.toll9$factor = "Toll9"
line = rbind(line.gd7,line.toll10b,line.toll9)
ggplot(line, mapping = aes(x = PC2,y = PC3, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC2,y = PC3, color = Genotype, shape = Time))
loadings =mir.pca$rotation[,1:3]
loadings1 = as.data.frame(t((t(loadings)-colMeans(loadings))/colSds(loadings)))
loadings1$Geneid = rownames(loadings)
#loadings1 = as.data.frame(loadings)
distance3d <- function(a,b){
v1 = a - b
distance = ((v1[[1]]^2 + v1[[2]]^2 + v1[[3]]^2)^0.5)
return(distance)
}
dist3d <- function(point,b,c) {
v1 <- b - c
v2 <- point - b
v3 <- cross3d_prod(v1,v2)
area <- sqrt(sum(v3*v3))/2
d <- 2*area/sqrt(sum(v1*v1))
return(d)
}
cross3d_prod <- function(v1,v2){
v3 <- vector()
v3[1] <- v1[2]*v2[3]-v1[3]*v2[2]
v3[2] <- v1[3]*v2[1]-v1[1]*v2[3]
v3[3] <- v1[1]*v2[2]-v1[2]*v2[1]
return(v3)
}
for(j in unique(line$factor)){
loadings1[[j]]=0
for(i in 1:nrow(loadings1)){
line1 = line %>% dplyr::filter(factor == j) %>% dplyr::select(PC1,PC2,PC3)
loadings1[i,j] = dist3d(b =as.numeric(line1[1,]),
c = as.numeric(line1[3,]),
point = as.numeric(loadings1[i,1:3]))
}
}
loadingsDF = gather(loadings1, key = PC, value = Loading, -Geneid )
ggplot(loadingsDF, mapping = aes(x = Loading, color = PC )) + geom_density()
loadingsDF.all = loadingsDF %>%  spread(key = PC, value = Loading)
tmp = loadingsDF.all
tmp$distance =  ((tmp$PC1^2 + tmp$PC2^2 + tmp$PC3^2)^0.5)
loadingsDF.all = tmp
loadingsDF.all.factorDistance =loadingsDF.all %>% gather(key = factor, value = distance2Factor,Time,Gd7,Toll10b,Toll9 )
View(loadingsDF.all)
View(loadingsDF)
loadingsDF
