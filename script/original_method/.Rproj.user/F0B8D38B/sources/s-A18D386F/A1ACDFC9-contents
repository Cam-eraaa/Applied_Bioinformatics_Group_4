---
title: "ChIPseq analysis"
author: "Johan"
date: "10/25/2019"
output: html_document

params:
  workingDir: /Users/johanreimegard/git/Applied_Bioinformatics_Group_4
  dataDir: data/ChIPseq
  sampleInfo: information/ChIP_ATAC_sampleInfo.tab.txt
  chipSeqData: H3K27ac/K27ac.featureCount.count.tab.txt 
  Antibody: K27ac
 
---






```{r setup, include=FALSE,message=FALSE}

source(paste(params$workingDir,"Rscripts/ExpressionAnalysisFunctions.R",sep = "/"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)

library(gplots)

library(knitr)
#install.packages("kableExtra")
library(kableExtra)
library("viridis")     





gtfFile = paste(params$workingDir, "annotations/Drosophila_melanogaster.BDGP6.28.99.gtf", sep = "/")



```


## H3K27ac



### Using feature count to get the counts

```{r Adding the first analysis of the data, include=FALSE}
# install RColorBrewer if missing

library(RColorBrewer)
library(gplots)


featureCountFile = paste(params$workingDir, params$dataDir,"H3K27ac",
                         paste(params$Antibody , "featureCount.count.tab.txt", sep = "."), sep = "/")

FCdata = read.table( file = featureCountFile, header = TRUE, 
                     sep = "\t", quote = "",  
                     stringsAsFactors = FALSE)

peakInfoLocation  = FCdata [,1:6] %>% dplyr::rename(geneID = Geneid)
countData = FCdata[,-1:-6]
rownames(countData) = peakInfoLocation$geneID



sampleInfoFile =paste(params$workingDir, params$sampleInfo, sep = "/")
sampleInfo = read.table( file = sampleInfoFile, header = TRUE, 
                     sep = "\t", quote = "",  
                     stringsAsFactors = FALSE)


sampleInfo$bamFiles2  =  gsub(pattern = "/",replacement = ".",x = sampleInfo$bamFiles)
sampleInfo$bamFiles2  =  gsub(pattern = "-",replacement = ".",x = sampleInfo$bamFiles2)


sampleInfo$Genotype = recode(sampleInfo$Genotype, Toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")

sampleInfo =sampleInfo %>% filter(Antibody == params$Antibody) 

sampleInfoCountTable = data.frame(bamFiles2 = colnames(countData))


sampleInfo = inner_join(sampleInfo,sampleInfoCountTable)

countData = countData[,sampleInfo$bamFiles2]
colnames(countData) = paste(sampleInfo$Genotype, sampleInfo$Replicate, sep = "_")
sampleInfo$sampleID = paste(sampleInfo$Genotype, sampleInfo$Replicate, sep = "_")

```



## Filtering

1. removing all peaks with less than 100 counts in all samples
2. Removing all peaks where not at least two samples has more than 5 in normalized rlog values

```{r differential gene expression analysis, message=FALSE}
library(DESeq2)

exp.data = countData
metaInfo = sampleInfo

rownames(metaInfo) = sampleInfo$sampleID


metaInfo$Genotype = as.factor(metaInfo$Genotype)
metaInfo$sampleID = as.factor(metaInfo$sampleID)


dds <- DESeqDataSetFromMatrix(countData = exp.data,
                               colData = metaInfo, ~1)


#Remove rows with low counts and normalise samples for visualisation
dds <- dds[ rowSums(counts(dds)) > 100, ]

dim(dds)
#Normalizing and change to 2 fold log changes. 

rld <- rlog(dds)



normExpression = as.data.frame(assay(rld))

normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleID, value = rlog, -geneID)
normExpressionDF = inner_join(normExpressionDF, metaInfo)

#normExpressionDF = inner_join(normExpressionDF, sampleInfo)


ggplot(normExpressionDF, aes(x = rlog)) + geom_density()

peakInfo = normExpressionDF %>% dplyr::select(geneID, rlog, sampleID) %>% 
  dplyr::group_by (geneID) %>%
  dplyr::summarize ( min = min(rlog), max = max(rlog), mean = mean(rlog), sd = sd(rlog), overQC = length(which(rlog > 5)) ) 

peakInfo.QC = peakInfo %>% filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>% filter(geneID %in% peakInfo.QC$geneID)


ggplot(normExpressionDF.QC, aes(x = rlog, color = sampleID)) + geom_density()


normExpression.QC = normExpressionDF.QC%>%
  dplyr::select(geneID, sampleID, rlog) %>% 
  spread(key = sampleID, value = rlog)

rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]



```


### Visualising distributions 


```{R  check the normalised data ,message=FALSE ,warning = FALSE }


plotSample2SampleDistance(normExpression.QC)

mir.pca <- prcomp(t(normExpression.QC), center = TRUE, scale = FALSE) 
e.var = (mir.pca[['sdev']]^2 / sum(mir.pca[['sdev']]^2))
e.var = as.data.frame( e.var )
e.var$PC = as.factor(1:nrow(e.var)) 
e.var$Variance = e.var$e.var*100
e.var$CumulativeVariance = cumsum(e.var$Variance)
qplot(PC, Variance, data=e.var, geom = c("point")
      , ylim = c(0,max(e.var$Variance)+5) 
      ,ylab = "Variance (%)")





pctable = as.data.frame(mir.pca$x)[, 1:5]
pctable$sampleID = rownames(pctable)
pctable = inner_join(pctable, metaInfo)


test  = plotPCAplot(PCAinfo = pctable, n.comp = 4,
            varianceInfo = e.var, 
            colorComponent = "Genotype",pchComponent = "Replicate"
              
)

test





```


### Print ChIPseq data to file 

```{r save the files}






sampleInfoFile = paste(params$workingDir, params$dataDir,"H3K27ac/H3K27ac.sampleInfo.QC.tab.txt", sep = "/")

sampleInfo.QC = sampleInfo %>% 
  dplyr::select( sampleID, Genotype, Replicate)

write.table(x = sampleInfo.QC, 
            file = sampleInfoFile,
            quote = F,
            sep =  "\t",
            row.names = F,
            col.names = T
            )



peakTableFile = paste(params$workingDir, params$dataDir,"H3K27ac/H3K27ac.peak.QC.tab.txt", sep = "/")


peakInfo.QC = inner_join(peakInfoLocation,peakInfo.QC)
write.table(x = peakInfo.QC, 
            file = peakTableFile,
            quote = F,
            sep =  "\t",
            row.names = F,
            col.names = T
)


countData.QC = countData[peakInfo.QC$geneID,sampleInfo.QC$sampleID]


countTableFile = paste(params$workingDir, params$dataDir,"H3K27ac/H3K27ac.counts.QC.tab.txt", sep = "/")


write.table(x = countData.QC, 
            file = countTableFile,
            quote = F,
            sep =  "\t",
            row.names = T,
            col.names = T
            )



rlogTableFile = paste(params$workingDir, params$dataDir,"H3K27ac/H3K27ac.rlog.QC.tab.txt", sep = "/")


rlogExpression.QC = normExpression[peakInfo.QC$geneID,sampleInfo.QC$sampleID]
 
write.table(x = rlogExpression.QC, 
            file = rlogTableFile,
            quote = F,
            sep =  "\t",
            row.names = T,
            col.names = T
            )




```



