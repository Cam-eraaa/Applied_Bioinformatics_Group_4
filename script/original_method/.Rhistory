knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("UpSetR")
knitr::opts_chunk$set(echo = TRUE)
install.packages("kableExtra")
if (!require("RColorBrewer")) {install.packages("RColorBrewer")}
library(RColorBrewer)
library(gplots)
library(tidyverse)
library(knitr)
library(kableExtra)
library(DESeq2)
#install.packages("kableExtra")
#install.packages("RColorBrewer")
install.packages("viridis")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("kableExtra")
#install.packages("RColorBrewer")
#install.packages("viridis")
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(ggplot2)
library(gplots)
library(tidyverse)
library(knitr)
library(kableExtra)
library(DESeq2)
install.packages("GGally")
#install.packages("GGally")
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")}
knitr::opts_chunk$set(echo = TRUE)
#install.packages("kableExtra")
#install.packages("viridis")
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
source('/Users/jj/Applied_Bioinformatics_Group_4/script/original_method/ExpressionAnalysisFunctions.r')
knitr::opts_chunk$set(echo = TRUE)
#install.packages("kableExtra")
#install.packages("viridis")
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
source('/Users/jj/Applied_Bioinformatics_Group_4/script/original_method/ExpressionAnalysisFunctions.r')
knitr::opts_chunk$set(echo = TRUE)
#install.packages("kableExtra")
#install.packages("viridis")
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
source('/Users/jj/Applied_Bioinformatics_Group_4/script/original_method/ExpressionAnalysisFunctions.r')
#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
BiocManager::install("DESeq2", version = "3.8")
#install.packages("GGally")
if (!requireNamespace("BiocManager", quietly = TRUE)){}
#install.packages("GGally")
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")}
BiocManager::install(version = "3.12")
install.packages(c("BiocManager", "GGally", "ggplot2", "gridExtra", "pheatmap"))
install.packages(c("dplyr", "gplots", "kableExtra", "knitr", "tidyr", "viridis"))
#install.packages("GGally")
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")}
BiocManager::install(version = "3.12")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
source('/Users/jj/Applied_Bioinformatics_Group_4/script/original_method/ExpressionAnalysisFunctions.r')
featureCountFile = paste(params$workingDir, params$dataDir,"counts.CDS.txt", sep = "/")
FCdata = read.table( file = featureCountFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
featureCountFile = paste(params$workingDir, params$dataDir,"counts.CDS.txt", sep = "/")
FCdata = read.table(file = featureCountFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
geneInfo  = FCdata [,1:6]
geneInfo  = geneInfo[,c(1,6)]
countData = FCdata[,-1:-6]
rownames(countData) = geneInfo$Geneid
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
source(paste(params$workingDir, params$dataDir,"ExpressionAnalysisFunctions.r", sep = "/"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
featureCountFile = paste(params$workingDir, params$dataDir,"counts.CDS.txt", sep = "/")
FCdata = read.table(file = featureCountFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
geneInfo  = FCdata [,1:6]
geneInfo  = geneInfo[,c(1,6)]
countData = FCdata[,-1:-6]
rownames(countData) = geneInfo$Geneid
View(countData)
View(geneInfo)
View(geneInfo)
View(countData)
sampleInfo = data.frame(bamFile =  colnames(countData))
sampleInfo= sampleInfo %>% separate(col = bamFile,sep = "\\.",into =  c("dir", "mutant","sampleInfo"), remove = FALSE)
sampleInfo = sampleInfo %>% separate(col = sampleInfo,sep = "_",into =  c("irrelevant", "time","replicate"))
sampleInfo = sampleInfo %>% separate(col = mutant,sep = "_",into =  c("mutant"))
sampleInfo = sampleInfo %>% dplyr::select(bamFile,mutant,time,replicate)
sampleInfo = sampleInfo %>% unite("sampleName", mutant:time:replicate, remove = FALSE )
sampleInfo = sampleInfo %>% dplyr::select(bamFile,sampleName,mutant,time,replicate)
rownames(sampleInfo) = sampleInfo$bamFile
sampleInfo = sampleInfo[colnames(countData), ]
colnames(countData) = sampleInfo$sampleName
rownames(sampleInfo) = sampleInfo$sampleName
sampleInfo = sampleInfo %>% dplyr::select(sampleName,mutant,time,replicate,bamFile)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
# Loading the count tsv file that contains the read count for each gene
featureCountFile = paste(params$workingDir, params$dataDir,"counts.CDS.txt", sep = "/")
FCdata = read.table(file = featureCountFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
# Creating matrix with geneID(1) and gene length(2)
geneInfo  = FCdata [,1:6]
geneInfo  = geneInfo[,c(1,6)]
# Creating matrix for the countdata, geneID and count for each sample
countData = FCdata[,-1:-6]
rownames(countData) = geneInfo$Geneid
sampleInfo = data.frame(bamFile =  colnames(countData))
sampleInfo= sampleInfo %>% separate(col = bamFile,sep = "\\.",into =  c("dir", "mutant","sampleInfo"), remove = FALSE)
sampleInfo = sampleInfo %>% separate(col = sampleInfo,sep = "_",into =  c("irrelevant", "time","replicate"))
sampleInfo = sampleInfo %>% separate(col = mutant,sep = "_",into =  c("mutant"))
sampleInfo = sampleInfo %>% dplyr::select(bamFile,mutant,time,replicate)
sampleInfo = sampleInfo %>% unite("sampleName", mutant:time:replicate, remove = FALSE )
sampleInfo = sampleInfo %>% dplyr::select(bamFile,sampleName,mutant,time,replicate)
rownames(sampleInfo) = sampleInfo$bamFile
sampleInfo = sampleInfo[colnames(countData), ]
colnames(countData) = sampleInfo$sampleName
rownames(sampleInfo) = sampleInfo$sampleName
sampleInfo = sampleInfo %>% dplyr::select(sampleName,mutant,time,replicate,bamFile)
geneExpression = log(rowSums(countData))
hist(geneExpression)
geneInfo$logExpression  =log(rowSums(countData))
geneInfo.QC = geneInfo %>% filter(logExpression > 1)
countData.QC =  countData[geneInfo.QC$Geneid,]
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
# Loading the count tsv file that contains the read count for each gene
featureCountFile = paste(params$workingDir, params$dataDir,"counts.CDS.txt", sep = "/")
FCdata = read.table(file = featureCountFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
# Creating matrix with geneID(1) and gene length(2)
geneInfo  = FCdata [,1:6]
geneInfo  = geneInfo[,c(1,6)]
# Creating matrix for the countdata, geneID and count for each sample
countData = FCdata[,-1:-6]
rownames(countData) = geneInfo$Geneid
sampleInfo = data.frame(bamFile =  colnames(countData))
sampleInfo= sampleInfo %>% separate(col = bamFile,sep = "\\.",into =  c("dir", "mutant","sampleInfo"), remove = FALSE)
sampleInfo = sampleInfo %>% separate(col = sampleInfo,sep = "_",into =  c("irrelevant", "time","replicate"))
sampleInfo = sampleInfo %>% separate(col = mutant,sep = "_",into =  c("mutant"))
sampleInfo = sampleInfo %>% dplyr::select(bamFile,mutant,time,replicate)
sampleInfo = sampleInfo %>% unite("sampleName", mutant:time:replicate, remove = FALSE )
sampleInfo = sampleInfo %>% dplyr::select(bamFile,sampleName,mutant,time,replicate)
rownames(sampleInfo) = sampleInfo$bamFile
sampleInfo = sampleInfo[colnames(countData), ]
colnames(countData) = sampleInfo$sampleName
rownames(sampleInfo) = sampleInfo$sampleName
sampleInfo = sampleInfo %>% dplyr::select(sampleName,mutant,time,replicate,bamFile)
View(sampleInfo)
View(sampleInfo)
geneExpression = log(rowSums(countData))
hist(geneExpression)
geneInfo$logExpression  =log(rowSums(countData))
geneInfo.QC = geneInfo %>% filter(logExpression > 1)
countData.QC =  countData[geneInfo.QC$Geneid,]
View(geneInfo.QC)
View(sampleInfo)
View(countData)
