ggplot(line, mapping = aes(x = PC2,y = PC3, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC2,y = PC3, color = Genotype, shape = Time))
## Saving sampleInfo File
sampleInfoFile = paste(params$workingDir, params$dataDir,"ATAC.sampleInfo.QC.tab.txt", sep = "/")
write.table(x = sampleInfo_Mutants,
file = sampleInfoFile,
quote = F,
sep =  "\t",
row.names = F,
col.names = T
)
## Saving peakInfo File
peakInfo_QC = peakInfo %>%
dplyr::rename(geneID = Geneid) %>%
inner_join( geneInfo.QC2)
peakTableFile = paste(params$workingDir, params$dataDir,"ATAC.CBP.peaks.QC.tab.txt", sep = "/")
write.table(x = peakInfo_QC,
file = peakTableFile,
quote = F,
sep =  "\t",
row.names = F,
col.names = T
)
count_ATAC_QC_File = paste(params$workingDir, params$dataDir,
paste(params$count_ATAC_QC, sep = "."), sep = "/")
countData.QC = countData_mutants[peakInfo_QC$geneID,
sampleInfo_Mutants$SampleInfo
]
write.table(x = countData.QC,
file = count_ATAC_QC_File,
quote = F,
sep =  "\t",
row.names = T,
col.names = T
)
## Saving normalised count file
NormalisedCountFile = paste(params$workingDir, params$dataDir,
paste(params$normalisedATACpeakData, sep = "."), sep = "/")
normExpression.QC = normExpression[peakInfo_QC$geneID,
sampleInfo_Mutants$SampleInfo
]
write.table(x = normExpression.QC, file = NormalisedCountFile,
quote = F, sep = "\t", col.names = T, row.names = T)
count_ATAC_QC_File
## Saving sampleInfo File
sampleInfoFile = paste(params$workingDir, params$dataDir,"ATAC.sampleInfo.QC.tab.txt", sep = "/")
write.table(x = sampleInfo_Mutants,
file = sampleInfoFile,
quote = F,
sep =  "\t",
row.names = F,
col.names = T
)
## Saving peakInfo File
peakInfo_QC = peakInfo %>%
dplyr::rename(geneID = Geneid) %>%
inner_join( geneInfo.QC2)
peakTableFile = paste(params$workingDir, params$resultsDir,"ATAC.CBP.peaks.QC.tab.txt", sep = "/")
write.table(x = peakInfo_QC,
file = peakTableFile,
quote = F,
sep =  "\t",
row.names = F,
col.names = T
)
count_ATAC_QC_File = paste(params$workingDir, params$resultsDir,
paste(params$count_ATAC_QC, sep = "."), sep = "/")
countData.QC = countData_mutants[peakInfo_QC$geneID,
sampleInfo_Mutants$SampleInfo
]
write.table(x = countData.QC,
file = count_ATAC_QC_File,
quote = F,
sep =  "\t",
row.names = T,
col.names = T
)
## Saving normalised count file
NormalisedCountFile = paste(params$workingDir, params$r,
paste(params$normalisedATACpeakData, sep = "."), sep = "/")
normExpression.QC = normExpression[peakInfo_QC$geneID,
sampleInfo_Mutants$SampleInfo
]
write.table(x = normExpression.QC, file = NormalisedCountFile,
quote = F, sep = "\t", col.names = T, row.names = T)
# Load the installed packages
library(DESeq2)
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#BiocManager::install("DESeq2")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
# Load the installed packages
library(DESeq2)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir,"ExpressionAnalysisFunctions.R",sep = "/"))
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.R",sep = "/"))
paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.R",sep = "/")
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.r",sep = "/"))
paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.r",sep = "/")
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.r",sep = "/"))
# Load the installed packages
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(RColorBrewer)
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.r",sep = "/"))
# Load the installed packages
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(RColorBrewer)
featureCountFile = paste(params$workingDir, params$dataDir,
params$chipSeqData, sep = "/")
FCdata = read.table(file = featureCountFile, header = TRUE, sep = "\t", quote = "", stringsAsFactors = FALSE)
featureCountFile
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.r",sep = "/"))
# Load the installed packages
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(RColorBrewer)
featureCountFile = paste(params$workingDir, params$dataDir,
params$chipSeqData, sep = "/")
FCdata = read.table(file = featureCountFile, header = TRUE, sep = "\t", quote = "", stringsAsFactors = FALSE)
peakInfo  = FCdata [,1:6]
countData = FCdata[,-1:-6]
rownames(countData) = peakInfo$Geneid
samples = colnames(countData)
samples = gsub(pattern = "..CBP_ChIP_seq_mapped.CBP_toll_dm6only.bam_dm6.", replacement = "", x = samples)
samples = gsub(pattern = ".dm6.bowtie2.sorted.bam", replacement = "", x = samples)
colnames(countData) = samples
sampleInfo = data.frame(sampleName = colnames(countData), sampleInfo = samples, stringsAsFactors = F)
sampleInfo= sampleInfo %>% separate(sampleInfo, c("Genotype", "Replicate", "Input", "sample"), sep = "_", remove = F)
sampleInfo$Genotype = recode(sampleInfo$Genotype, toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")
sampleInfo$Genotype = recode(sampleInfo$Genotype, toll10B = "Toll10b")
sampleInfo$sampleID = paste(sampleInfo$Genotype, sampleInfo$Replicate, sampleInfo$Input , sep = "_")
countData = countData[,sampleInfo$sampleName]
colnames(countData) = sampleInfo$sampleID
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.r",sep = "/"))
# Load the installed packages
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(RColorBrewer)
featureCountFile = paste(params$workingDir, params$dataDir,
params$chipSeqData, sep = "/")
FCdata = read.table(file = featureCountFile, header = TRUE, sep = "\t", quote = "", stringsAsFactors = FALSE)
peakInfo  = FCdata [,1:6]
countData = FCdata[,-1:-6]
rownames(countData) = peakInfo$Geneid
samples = colnames(countData)
samples = gsub(pattern = "..CBP_ChIP_seq_mapped.CBP_toll_dm6only.bam_dm6.", replacement = "", x = samples)
samples = gsub(pattern = ".dm6.bowtie2.sorted.bam", replacement = "", x = samples)
colnames(countData) = samples
sampleInfo = data.frame(sampleName = colnames(countData), sampleInfo = samples, stringsAsFactors = F)
sampleInfo= sampleInfo %>% separate(sampleInfo, c("Genotype", "Replicate", "Input", "sample"), sep = "_", remove = F)
sampleInfo$Genotype = recode(sampleInfo$Genotype, toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")
sampleInfo$Genotype = recode(sampleInfo$Genotype, toll10B = "Toll10b")
sampleInfo$sampleID = paste(sampleInfo$Genotype, sampleInfo$Replicate, sampleInfo$Input , sep = "_")
countData = countData[,sampleInfo$sampleName]
colnames(countData) = sampleInfo$sampleID
library(DESeq2)
library(edgeR)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
#BiocManager::install("DESeq2")
BiocManager::install("edgeR")
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
#BiocManager::install("DESeq2")
#BiocManager::install("edgeR")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.r",sep = "/"))
# Load the installed packages
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(RColorBrewer)
library(DESeq2)
library(edgeR)
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
#BiocManager::install("DESeq2")
#BiocManager::install("edgeR")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.r",sep = "/"))
# Load the installed packages
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(RColorBrewer)
library(DESeq2)
library(edgeR)
featureCountFile = paste(params$workingDir, params$dataDir,
params$chipSeqData, sep = "/")
FCdata = read.table(file = featureCountFile, header = TRUE, sep = "\t", quote = "", stringsAsFactors = FALSE)
peakInfo  = FCdata [,1:6]
countData = FCdata[,-1:-6]
rownames(countData) = peakInfo$Geneid
samples = colnames(countData)
samples = gsub(pattern = "..CBP_ChIP_seq_mapped.CBP_toll_dm6only.bam_dm6.", replacement = "", x = samples)
samples = gsub(pattern = ".dm6.bowtie2.sorted.bam", replacement = "", x = samples)
colnames(countData) = samples
sampleInfo = data.frame(sampleName = colnames(countData), sampleInfo = samples, stringsAsFactors = F)
sampleInfo= sampleInfo %>% separate(sampleInfo, c("Genotype", "Replicate", "Input", "sample"), sep = "_", remove = F)
sampleInfo$Genotype = recode(sampleInfo$Genotype, toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")
sampleInfo$Genotype = recode(sampleInfo$Genotype, toll10B = "Toll10b")
sampleInfo$sampleID = paste(sampleInfo$Genotype, sampleInfo$Replicate, sampleInfo$Input , sep = "_")
countData = countData[,sampleInfo$sampleName]
colnames(countData) = sampleInfo$sampleID
exp.data = countData
metaInfo = sampleInfo
rownames(metaInfo) = sampleInfo$sampleID
metaInfo$Genotype = as.factor(metaInfo$Genotype)
metaInfo$sampleID = as.factor(metaInfo$sampleID)
metaInfo$Input = as.factor(metaInfo$Input)
dds <- DESeqDataSetFromMatrix(countData = exp.data,
colData = metaInfo, ~1)
#Remove rows with low counts and normalise samples for visualisation
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#Normalizing and change to 2 fold log changes.
test2 =   rpkm(countData, gene.length = peakInfo$Length)
plotSample2SampleDistance(test2)
rld <- rlog(dds)
normExpression = as.data.frame(assay(rld))
normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleID, value = rlog, -geneID)
normExpressionDF = inner_join(normExpressionDF, metaInfo)
head(normExpressionDF)
#normExpressionDF = inner_join(normExpressionDF, sampleInfo)
ggplot(normExpressionDF, aes(x = rlog, color = Input)) + geom_density()
peakInfo = normExpressionDF %>% dplyr::select(geneID, rlog, sampleName) %>%
dplyr::group_by (geneID) %>%
dplyr::summarize ( min = min(rlog), max = max(rlog), mean = mean(rlog), sd = sd(rlog), overQC = length(which(rlog > 5)) )
peakInfo.QC = peakInfo %>% filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>% filter(geneID %in% peakInfo.QC$geneID)
ggplot(normExpressionDF.QC, aes(x = rlog, color = sampleName)) + geom_density()
normExpressionDF.QC.CBP = normExpressionDF.QC %>% filter(Input == "CBP")
normExpression.QC = normExpressionDF.QC.CBP %>%
dplyr::select(geneID, sampleName, rlog) %>%
spread(key = sampleName, value = rlog)
rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]
plotSample2SampleDistance(normExpression.QC)
mir.pca <- prcomp(t(normExpression.QC), center = TRUE, scale = FALSE)
e.var = (mir.pca[['sdev']]^2 / sum(mir.pca[['sdev']]^2))
e.var = as.data.frame( e.var )
e.var$PC = as.factor(1:nrow(e.var))
e.var$Variance = e.var$e.var*100
e.var$CumulativeVariance = cumsum(e.var$Variance)
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
pctable = as.data.frame(mir.pca$x)[, 1:5]
pctable$sampleName = rownames(pctable)
pctable = inner_join(pctable, metaInfo)
test  = plotPCAplot(PCAinfo = pctable, n.comp = 4,
varianceInfo = e.var,
colorComponent = "Genotype",pchComponent = "Replicate"
)
test
sampleInfoFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.sampleInfo.QC.tab.txt", sep = "/")
sampleInfo.QC = sampleInfo %>%
filter (Input == "CBP") %>%
select(sampleInfo, sampleID, Genotype, Replicate, Input)
write.table(x = sampleInfo.QC, file = sampleInfoFile, quote = F, sep =  "\t", row.names = F, col.names = T)
sampleInfoFile
sampleInfoFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.sampleInfo.QC.tab.txt", sep = "/")
sampleInfo.QC = sampleInfo %>%
filter (Input == "CBP") %>%
select(sampleInfo, sampleID, Genotype, Replicate, Input)
write.table(x = sampleInfo.QC, file = sampleInfoFile, quote = F, sep =  "\t", row.names = F, col.names = T)
sampleInfoFile
sampleInfoFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.sampleInfo.QC.tab.txt", sep = "/")
sampleInfo.QC = sampleInfo %>%
filter (Input == "CBP") %>%
select(sampleInfo, sampleID, Genotype, Replicate, Input)
write.table(x = sampleInfo.QC, file = sampleInfoFile, quote = F, sep =  "\t", row.names = F, col.names = T)
peakTableFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.peak.QC.tab.txt", sep = "/")
write.table(x = peakInfo.QC, file = peakTableFile, quote = F, sep =  "\t", row.names = F, col.names = T)
countData.QC = countData[peakInfo.QC$geneID,sampleInfo.QC$sampleID]
countTableFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.counts.QC.tab.txt", sep = "/")
write.table(x = countData.QC, file = countTableFile, quote = F, sep =  "\t", row.names = T, col.names = T)
rlogTableFile = paste(params$workingDir, params$resutlsDir,"CBP/CBP.CBP.rlog.QC.tab.txt", sep = "/")
rlogExpression.QC = normExpression[peakInfo.QC$geneID,sampleInfo.QC$sampleID]
write.table(x = rlogExpression.QC, file = rlogTableFile, quote = F,  sep =  "\t", row.names = T, col.names = T)
rlogTableFile
rlogTableFile
rlogTableFile
rlogTableFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.rlog.QC.tab.txt", sep = "/")
rlogTableFile
sampleInfoFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.sampleInfo.QC.tab.txt", sep = "/")
sampleInfo.QC = sampleInfo %>%
filter (Input == "CBP") %>%
select(sampleInfo, sampleID, Genotype, Replicate, Input)
write.table(x = sampleInfo.QC, file = sampleInfoFile, quote = F, sep =  "\t", row.names = F, col.names = T)
peakTableFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.peak.QC.tab.txt", sep = "/")
write.table(x = peakInfo.QC, file = peakTableFile, quote = F, sep =  "\t", row.names = F, col.names = T)
countData.QC = countData[peakInfo.QC$geneID,sampleInfo.QC$sampleID]
countTableFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.counts.QC.tab.txt", sep = "/")
write.table(x = countData.QC, file = countTableFile, quote = F, sep =  "\t", row.names = T, col.names = T)
rlogTableFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.rlog.QC.tab.txt", sep = "/")
rlogExpression.QC = normExpression[peakInfo.QC$geneID,sampleInfo.QC$sampleID]
write.table(x = rlogExpression.QC, file = rlogTableFile, quote = F,  sep =  "\t", row.names = T, col.names = T)
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
#BiocManager::install("DESeq2")
#BiocManager::install("edgeR")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.r",sep = "/"))
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
#BiocManager::install("DESeq2")
#BiocManager::install("edgeR")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.r",sep = "/"))
# Load the installed packages
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(RColorBrewer)
library(DESeq2)
library(edgeR)
featureCountFile
featureCountFile
featureCountFile = paste(params$workingDir, params$dataDir,"H3K27ac",
paste(params$Antibody , "featureCount.count.tab.txt", sep = "."), sep = "/")
featureCountFile
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
#BiocManager::install("DESeq2")
#BiocManager::install("edgeR")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.r",sep = "/"))
# Load the installed packages
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(RColorBrewer)
library(DESeq2)
library(edgeR)
sampleInfoFile = paste(params$workingDir, params$resultsDir,params$Antibody, "CBP.CBP.sampleInfo.QC.tab.txt", sep = "/")
sampleInfo.QC = sampleInfo %>%
filter (Input == "CBP") %>%
select(sampleInfo, sampleID, Genotype, Replicate, Input)
write.table(x = sampleInfo.QC, file = sampleInfoFile, quote = F, sep =  "\t", row.names = F, col.names = T)
peakTableFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.peak.QC.tab.txt", sep = "/")
write.table(x = peakInfo.QC, file = peakTableFile, quote = F, sep =  "\t", row.names = F, col.names = T)
countData.QC = countData[peakInfo.QC$geneID,sampleInfo.QC$sampleID]
countTableFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.counts.QC.tab.txt", sep = "/")
write.table(x = countData.QC, file = countTableFile, quote = F, sep =  "\t", row.names = T, col.names = T)
rlogTableFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.rlog.QC.tab.txt", sep = "/")
rlogExpression.QC = normExpression[peakInfo.QC$geneID,sampleInfo.QC$sampleID]
write.table(x = rlogExpression.QC, file = rlogTableFile, quote = F,  sep =  "\t", row.names = T, col.names = T)
sampleInfoFile = paste(params$workingDir, params$resultsDir,params$Antibody, "CBP.CBP.sampleInfo.QC.tab.txt", sep = "/")
sampleInfo.QC = sampleInfo %>%
filter (Input == params$Antibody) %>%
select(sampleInfo, sampleID, Genotype, Replicate, Input)
write.table(x = sampleInfo.QC, file = sampleInfoFile, quote = F, sep =  "\t", row.names = F, col.names = T)
peakTableFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.peak.QC.tab.txt", sep = "/")
write.table(x = peakInfo.QC, file = peakTableFile, quote = F, sep =  "\t", row.names = F, col.names = T)
countData.QC = countData[peakInfo.QC$geneID,sampleInfo.QC$sampleID]
countTableFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.counts.QC.tab.txt", sep = "/")
write.table(x = countData.QC, file = countTableFile, quote = F, sep =  "\t", row.names = T, col.names = T)
rlogTableFile = paste(params$workingDir, params$resultsDir,"CBP/CBP.CBP.rlog.QC.tab.txt", sep = "/")
rlogExpression.QC = normExpression[peakInfo.QC$geneID,sampleInfo.QC$sampleID]
write.table(x = rlogExpression.QC, file = rlogTableFile, quote = F,  sep =  "\t", row.names = T, col.names = T)
sampleInfoFile = paste(params$workingDir, params$resultsDir,params$Antibody, "CBP.CBP.sampleInfo.QC.tab.txt", sep = "/")
sampleInfo.QC = sampleInfo %>%
filter (Input == params$Antibody) %>%
select(sampleInfo, sampleID, Genotype, Replicate, Input)
sampleInfoFile = paste(params$workingDir, params$resultsDir,params$Antibody, "CBP.CBP.sampleInfo.QC.tab.txt", sep = "/")
sampleInfo.QC = sampleInfo %>%
filter (Input == params$Antibody) %>%
select(sampleInfo, sampleID, Genotype, Replicate, Input)
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
#BiocManager::install("DESeq2")
#BiocManager::install("edgeR")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir, "ExpressionAnalysisFunctions.r",sep = "/"))
# Load the installed packages
library(tidyverse)
library(gplots)
library(knitr)
library(kableExtra)
library("viridis")
library(RColorBrewer)
library(DESeq2)
library(edgeR)
featureCountFile = paste(params$workingDir, params$dataDir,"H3K27ac",
paste(params$Antibody , "featureCount.count.tab.txt", sep = "."), sep = "/")
FCdata = read.table( file = featureCountFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
peakInfoLocation  = FCdata [,1:6] %>% dplyr::rename(geneID = Geneid)
countData = FCdata[,-1:-6]
rownames(countData) = peakInfoLocation$geneID
sampleInfoFile =paste(params$workingDir, params$sampleInfo, sep = "/")
sampleInfo = read.table( file = sampleInfoFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
featureCountFile = paste(params$workingDir, params$dataDir,"H3K27ac",
paste(params$Antibody , "featureCount.count.tab.txt", sep = "."), sep = "/")
FCdata = read.table( file = featureCountFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
peakInfoLocation  = FCdata [,1:6] %>% dplyr::rename(geneID = Geneid)
countData = FCdata[,-1:-6]
rownames(countData) = peakInfoLocation$geneID
sampleInfoFile =paste(params$workingDir, params$sampleInfo, sep = "/")
sampleInfo = read.table( file = sampleInfoFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
sampleInfo$bamFiles2  =  gsub(pattern = "/",replacement = ".",x = sampleInfo$bamFiles)
sampleInfo$bamFiles2  =  gsub(pattern = "-",replacement = ".",x = sampleInfo$bamFiles2)
sampleInfo$Genotype = recode(sampleInfo$Genotype, Toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")
sampleInfo =sampleInfo %>% filter(Antibody == params$Antibody)
sampleInfoCountTable = data.frame(bamFiles2 = colnames(countData))
sampleInfo = inner_join(sampleInfo,sampleInfoCountTable)
countData = countData[,sampleInfo$bamFiles2]
colnames(countData) = paste(sampleInfo$Genotype, sampleInfo$Replicate, sep = "_")
sampleInfo$sampleID = paste(sampleInfo$Genotype, sampleInfo$Replicate, sep = "_")
