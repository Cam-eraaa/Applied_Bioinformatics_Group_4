library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
source('/Users/jj/Applied_Bioinformatics_Group_4/script/original_method/ExpressionAnalysisFunctions.r')
#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
BiocManager::install("DESeq2", version = "3.8")
#install.packages("GGally")
if (!requireNamespace("BiocManager", quietly = TRUE)){}
#install.packages("GGally")
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")}
BiocManager::install(version = "3.12")
install.packages(c("BiocManager", "GGally", "ggplot2", "gridExtra", "pheatmap"))
install.packages(c("dplyr", "gplots", "kableExtra", "knitr", "tidyr", "viridis"))
#install.packages("GGally")
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")}
BiocManager::install(version = "3.12")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
source('/Users/jj/Applied_Bioinformatics_Group_4/script/original_method/ExpressionAnalysisFunctions.r')
featureCountFile = paste(params$workingDir, params$dataDir,"counts.CDS.txt", sep = "/")
FCdata = read.table( file = featureCountFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
featureCountFile = paste(params$workingDir, params$dataDir,"counts.CDS.txt", sep = "/")
FCdata = read.table(file = featureCountFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
geneInfo  = FCdata [,1:6]
geneInfo  = geneInfo[,c(1,6)]
countData = FCdata[,-1:-6]
rownames(countData) = geneInfo$Geneid
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
source(paste(params$workingDir, params$dataDir,"ExpressionAnalysisFunctions.r", sep = "/"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
featureCountFile = paste(params$workingDir, params$dataDir,"counts.CDS.txt", sep = "/")
FCdata = read.table(file = featureCountFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
geneInfo  = FCdata [,1:6]
geneInfo  = geneInfo[,c(1,6)]
countData = FCdata[,-1:-6]
rownames(countData) = geneInfo$Geneid
View(countData)
View(geneInfo)
View(geneInfo)
View(countData)
sampleInfo = data.frame(bamFile =  colnames(countData))
sampleInfo= sampleInfo %>% separate(col = bamFile,sep = "\\.",into =  c("dir", "mutant","sampleInfo"), remove = FALSE)
sampleInfo = sampleInfo %>% separate(col = sampleInfo,sep = "_",into =  c("irrelevant", "time","replicate"))
sampleInfo = sampleInfo %>% separate(col = mutant,sep = "_",into =  c("mutant"))
sampleInfo = sampleInfo %>% dplyr::select(bamFile,mutant,time,replicate)
sampleInfo = sampleInfo %>% unite("sampleName", mutant:time:replicate, remove = FALSE )
sampleInfo = sampleInfo %>% dplyr::select(bamFile,sampleName,mutant,time,replicate)
rownames(sampleInfo) = sampleInfo$bamFile
sampleInfo = sampleInfo[colnames(countData), ]
colnames(countData) = sampleInfo$sampleName
rownames(sampleInfo) = sampleInfo$sampleName
sampleInfo = sampleInfo %>% dplyr::select(sampleName,mutant,time,replicate,bamFile)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
# Loading the count tsv file that contains the read count for each gene
featureCountFile = paste(params$workingDir, params$dataDir,"counts.CDS.txt", sep = "/")
FCdata = read.table(file = featureCountFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
# Creating matrix with geneID(1) and gene length(2)
geneInfo  = FCdata [,1:6]
geneInfo  = geneInfo[,c(1,6)]
# Creating matrix for the countdata, geneID and count for each sample
countData = FCdata[,-1:-6]
rownames(countData) = geneInfo$Geneid
sampleInfo = data.frame(bamFile =  colnames(countData))
sampleInfo= sampleInfo %>% separate(col = bamFile,sep = "\\.",into =  c("dir", "mutant","sampleInfo"), remove = FALSE)
sampleInfo = sampleInfo %>% separate(col = sampleInfo,sep = "_",into =  c("irrelevant", "time","replicate"))
sampleInfo = sampleInfo %>% separate(col = mutant,sep = "_",into =  c("mutant"))
sampleInfo = sampleInfo %>% dplyr::select(bamFile,mutant,time,replicate)
sampleInfo = sampleInfo %>% unite("sampleName", mutant:time:replicate, remove = FALSE )
sampleInfo = sampleInfo %>% dplyr::select(bamFile,sampleName,mutant,time,replicate)
rownames(sampleInfo) = sampleInfo$bamFile
sampleInfo = sampleInfo[colnames(countData), ]
colnames(countData) = sampleInfo$sampleName
rownames(sampleInfo) = sampleInfo$sampleName
sampleInfo = sampleInfo %>% dplyr::select(sampleName,mutant,time,replicate,bamFile)
geneExpression = log(rowSums(countData))
hist(geneExpression)
geneInfo$logExpression  =log(rowSums(countData))
geneInfo.QC = geneInfo %>% filter(logExpression > 1)
countData.QC =  countData[geneInfo.QC$Geneid,]
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
# Loading the count tsv file that contains the read count for each gene
featureCountFile = paste(params$workingDir, params$dataDir,"counts.CDS.txt", sep = "/")
FCdata = read.table(file = featureCountFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
# Creating matrix with geneID(1) and gene length(2)
geneInfo  = FCdata [,1:6]
geneInfo  = geneInfo[,c(1,6)]
# Creating matrix for the countdata, geneID and count for each sample
countData = FCdata[,-1:-6]
rownames(countData) = geneInfo$Geneid
sampleInfo = data.frame(bamFile =  colnames(countData))
sampleInfo= sampleInfo %>% separate(col = bamFile,sep = "\\.",into =  c("dir", "mutant","sampleInfo"), remove = FALSE)
sampleInfo = sampleInfo %>% separate(col = sampleInfo,sep = "_",into =  c("irrelevant", "time","replicate"))
sampleInfo = sampleInfo %>% separate(col = mutant,sep = "_",into =  c("mutant"))
sampleInfo = sampleInfo %>% dplyr::select(bamFile,mutant,time,replicate)
sampleInfo = sampleInfo %>% unite("sampleName", mutant:time:replicate, remove = FALSE )
sampleInfo = sampleInfo %>% dplyr::select(bamFile,sampleName,mutant,time,replicate)
rownames(sampleInfo) = sampleInfo$bamFile
sampleInfo = sampleInfo[colnames(countData), ]
colnames(countData) = sampleInfo$sampleName
rownames(sampleInfo) = sampleInfo$sampleName
sampleInfo = sampleInfo %>% dplyr::select(sampleName,mutant,time,replicate,bamFile)
View(sampleInfo)
View(sampleInfo)
geneExpression = log(rowSums(countData))
hist(geneExpression)
geneInfo$logExpression  =log(rowSums(countData))
geneInfo.QC = geneInfo %>% filter(logExpression > 1)
countData.QC =  countData[geneInfo.QC$Geneid,]
View(geneInfo.QC)
View(sampleInfo)
View(countData)
knitr::opts_chunk$set(echo = TRUE)
#BiocManager::install("DESeq2")
library(DESeq2)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
#source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
source('/Users/jj/Applied_Bioinformatics_Group_4/data_johan/Rscripts/cleaned/ExpressionAnalysisFunctions.R')
knitr::opts_chunk$set(echo = TRUE)
#BiocManager::install("DESeq2")
library(DESeq2)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
#source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
source('/Users/jj/Applied_Bioinformatics_Group_4/data_johan/Rscripts/cleaned/ExpressionAnalysisFunctions.R')
# Loading the count tsv file that contains the read count for each gene
featureCountFile = paste(params$workingDir, params$dataDir,"counts.CDS.txt", sep = "/")
FCdata = read.table(file = featureCountFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
# Creating matrix with geneID(1) and gene length(2)
geneInfo  = FCdata [,1:6]
geneInfo  = geneInfo[,c(1,6)]
# Creating matrix for the countdata, geneID and count for each sample
countData = FCdata[,-1:-6]
rownames(countData) = geneInfo$Geneid
#Extract the information about the samples from the sampleNname.
#Save sampleName, mutant, time, replicate and name of the bam file.
sampleInfo = data.frame(bamFile =  colnames(countData))
sampleInfo= sampleInfo %>% separate(col = bamFile,sep = "\\.",into =  c("dir", "mutant","sampleInfo"), remove = FALSE)
sampleInfo = sampleInfo %>% separate(col = sampleInfo,sep = "_",into =  c("irrelevant", "time","replicate"))
sampleInfo = sampleInfo %>% separate(col = mutant,sep = "_",into =  c("mutant"))
sampleInfo = sampleInfo %>% dplyr::select(bamFile,mutant,time,replicate)
sampleInfo = sampleInfo %>% unite("sampleName", mutant:time:replicate, remove = FALSE )
sampleInfo = sampleInfo %>% dplyr::select(bamFile,sampleName,mutant,time,replicate)
# Create a table and set rownames as samplename and rows as samplename, mutant, time, replicate and bamfile name.
rownames(sampleInfo) = sampleInfo$bamFile
sampleInfo = sampleInfo[colnames(countData), ]
colnames(countData) = sampleInfo$sampleName
rownames(sampleInfo) = sampleInfo$sampleName
sampleInfo = sampleInfo %>% dplyr::select(sampleName,mutant,time,replicate,bamFile)
# Logaritmize the counts
geneExpression = log(rowSums(countData))
hist(geneExpression)
geneInfo$logExpression  =log(rowSums(countData))
# Filter out all genes with no expression(counts = 0 --> log(count)=1)
geneInfo.QC = geneInfo %>% filter(logExpression > 1)
# Save only the count data with genes with expression
countData.QC =  countData[geneInfo.QC$Geneid,]
knownGenes = read.table(file = paste(params$workingDir, params$informationDir,"FlyBase_IDs.txt", sep = "/"),
sep = "\t", header = F, quote = "", stringsAsFactors = F)
colnames(knownGenes) = c("Submitted ID", "Current ID","Converted ID","Related record")
geneInfo.QC$knownGene = "No"
geneInfo.QC$knownGene[geneInfo.QC$Geneid %in% knownGenes$`Current ID`] = "Yes"
# Change filenames
test = sampleInfo["toll10b_5h_rep1", ]
sampleInfo["toll10b_5h_rep1", ] = sampleInfo["gd7_5h_rep1", ]
sampleInfo["gd7_5h_rep1", ] = test
colnames(countData) = sampleInfo$sampleName
sampleInfo.QC  = sampleInfo
sampleInfo.QC$sampleName = rownames(sampleInfo)
sampleInfo.QC %>% select(sampleName, bamFile) %>% separate(col = sampleName,sep = "_",into =  c("mutant", "time","replicate"), remove = FALSE)
sampleInfo.QC %>%
kable() %>%
kable_styling()
exp.data = countData.QC
metaInfo = sampleInfo.QC
metaInfo$mutant = as.factor(metaInfo$mutant)
metaInfo$time = as.factor(metaInfo$time)
dds <- DESeqDataSetFromMatrix(countData = exp.data,
colData = metaInfo,
design = ~time + mutant )
#Remove rows with low counts and normalise samples for visualisation
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#Normalizing and change to 2 fold log changes.
rld <- rlog(dds)
normExpression = as.data.frame(assay(rld))
head(normExpression)
normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleName, value = rlog, -geneID)
normExpressionDF = inner_join(normExpressionDF, sampleInfo.QC)
ggplot(normExpressionDF, aes(x = rlog, color = sampleName, linetype = time)) + geom_density()
geneInfo = normExpressionDF %>% dplyr::select(geneID, rlog, sampleName) %>%
dplyr::group_by (geneID) %>%
dplyr::summarize ( min = min(rlog), max = max(rlog), mean = mean(rlog), sd = sd(rlog), overQC = length(which(rlog > 5)) )
geneInfo.QC2 = geneInfo %>% filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>% filter(geneID %in% geneInfo.QC2$geneID)
ggplot(normExpressionDF.QC, aes(x = rlog, color = mutant, linetype = time)) + geom_density()
normExpression.QC = normExpressionDF.QC %>%
dplyr::select(geneID, sampleName, rlog) %>%
spread(key = sampleName, value = rlog)
rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]
plotSample2SampleDistance(normExpression.QC)
#BiocManager::install("DESeq2")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library("RColorBrewer",quietly = TRUE,warn.conflicts = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#BiocManager::install("DESeq2")
#install.packages("RColorBrewer")
library(DESeq2)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
# Loading the count tsv file that contains the read count for each gene
featureCountFile = paste(params$workingDir, params$dataDir,"counts.CDS.txt", sep = "/")
FCdata = read.table(file = featureCountFile, header = TRUE,
sep = "\t", quote = "",
stringsAsFactors = FALSE)
# Creating matrix with geneID(1) and gene length(2)
geneInfo  = FCdata [,1:6]
geneInfo  = geneInfo[,c(1,6)]
# Creating matrix for the countdata, geneID and count for each sample
countData = FCdata[,-1:-6]
rownames(countData) = geneInfo$Geneid
#Extract the information about the samples from the sampleNname.
#Save sampleName, mutant, time, replicate and name of the bam file.
sampleInfo = data.frame(bamFile =  colnames(countData))
sampleInfo= sampleInfo %>% separate(col = bamFile,sep = "\\.",into =  c("dir", "mutant","sampleInfo"), remove = FALSE)
sampleInfo = sampleInfo %>% separate(col = sampleInfo,sep = "_",into =  c("irrelevant", "time","replicate"))
sampleInfo = sampleInfo %>% separate(col = mutant,sep = "_",into =  c("mutant"))
sampleInfo = sampleInfo %>% dplyr::select(bamFile,mutant,time,replicate)
sampleInfo = sampleInfo %>% unite("sampleName", mutant:time:replicate, remove = FALSE )
sampleInfo = sampleInfo %>% dplyr::select(bamFile,sampleName,mutant,time,replicate)
# Create a table and set rownames as samplename and rows as samplename, mutant, time, replicate and bamfile name.
rownames(sampleInfo) = sampleInfo$bamFile
sampleInfo = sampleInfo[colnames(countData), ]
colnames(countData) = sampleInfo$sampleName
rownames(sampleInfo) = sampleInfo$sampleName
sampleInfo = sampleInfo %>% dplyr::select(sampleName,mutant,time,replicate,bamFile)
# Logaritmize the counts
geneExpression = log(rowSums(countData))
hist(geneExpression)
geneInfo$logExpression  =log(rowSums(countData))
# Filter out all genes with no expression(counts = 0 --> log(count)=1)
geneInfo.QC = geneInfo %>% filter(logExpression > 1)
# Save only the count data with genes with expression
countData.QC =  countData[geneInfo.QC$Geneid,]
knownGenes = read.table(file = paste(params$workingDir, params$informationDir,"FlyBase_IDs.txt", sep = "/"),
sep = "\t", header = F, quote = "", stringsAsFactors = F)
colnames(knownGenes) = c("Submitted ID", "Current ID","Converted ID","Related record")
geneInfo.QC$knownGene = "No"
geneInfo.QC$knownGene[geneInfo.QC$Geneid %in% knownGenes$`Current ID`] = "Yes"
# Change filenames
test = sampleInfo["toll10b_5h_rep1", ]
sampleInfo["toll10b_5h_rep1", ] = sampleInfo["gd7_5h_rep1", ]
sampleInfo["gd7_5h_rep1", ] = test
colnames(countData) = sampleInfo$sampleName
sampleInfo.QC  = sampleInfo
sampleInfo.QC$sampleName = rownames(sampleInfo)
sampleInfo.QC %>% select(sampleName, bamFile) %>% separate(col = sampleName,sep = "_",into =  c("mutant", "time","replicate"), remove = FALSE)
sampleInfo.QC %>%
kable() %>%
kable_styling()
exp.data = countData.QC
metaInfo = sampleInfo.QC
metaInfo$mutant = as.factor(metaInfo$mutant)
metaInfo$time = as.factor(metaInfo$time)
dds <- DESeqDataSetFromMatrix(countData = exp.data,
colData = metaInfo,
design = ~time + mutant )
#Remove rows with low counts and normalise samples for visualisation
dds <- dds[ rowSums(counts(dds)) > 100, ]
dim(dds)
#Normalizing and change to 2 fold log changes.
rld <- rlog(dds)
normExpression = as.data.frame(assay(rld))
head(normExpression)
normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleName, value = rlog, -geneID)
normExpressionDF = inner_join(normExpressionDF, sampleInfo.QC)
ggplot(normExpressionDF, aes(x = rlog, color = sampleName, linetype = time)) + geom_density()
geneInfo = normExpressionDF %>% dplyr::select(geneID, rlog, sampleName) %>%
dplyr::group_by (geneID) %>%
dplyr::summarize ( min = min(rlog), max = max(rlog), mean = mean(rlog), sd = sd(rlog), overQC = length(which(rlog > 5)) )
geneInfo.QC2 = geneInfo %>% filter(overQC > 2)
normExpressionDF.QC = normExpressionDF %>% filter(geneID %in% geneInfo.QC2$geneID)
ggplot(normExpressionDF.QC, aes(x = rlog, color = mutant, linetype = time)) + geom_density()
normExpression.QC = normExpressionDF.QC %>%
dplyr::select(geneID, sampleName, rlog) %>%
spread(key = sampleName, value = rlog)
rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]
plotSample2SampleDistance(normExpression.QC)
#'  __Figure 1 Plotting sample to sample distance__ .
mir.pca <- prcomp(t(normExpression.QC), center = TRUE, scale = FALSE)
e.var = (mir.pca[['sdev']]^2 / sum(mir.pca[['sdev']]^2))
e.var = as.data.frame( e.var )
e.var$PC = as.factor(1:nrow(e.var))
e.var$Variance = e.var$e.var*100
e.var$CumulativeVariance = cumsum(e.var$Variance)
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
#'  __Figure 2 Plotting PCA variance__.
#'  Displays how much each of the PC contributes to the overall expression.
#'  This suggest that the two first PC explains most of the variation.
#'
#+ save2, include=FALSE
#ggsave(paste(params$workingDirectory,params$proSeqDirectory, "PCAvariance.png", sep = "/"))
#'
#'
pctable = as.data.frame(mir.pca$x)[, 1:6]
pctable$sampleName = rownames(pctable)
pctable = inner_join(pctable, metaInfo)
test  = plotPCAplot(PCAinfo = pctable, n.comp = 5,
varianceInfo = e.var,
colorComponent = "mutant",
pchComponent = "time"
)
test
#ggsave("PCA_analysis.pdf")
loadings = mir.pca$rotation[,1:3]
mean = pctable %>% dplyr::select(PC1,PC2,PC3,mutant) %>%
dplyr::group_by(mutant) %>%
dplyr::summarise(PC1 = mean(PC1) ,PC2 = mean(PC2), PC3 = mean(PC3) )
meantime = pctable %>% dplyr::select(PC1,PC2,PC3,time) %>%
dplyr::group_by(time) %>%
dplyr::summarise(PC1 = mean(PC1) ,PC2 = mean(PC2), PC3 = mean(PC3) )
origo = data.frame(PC1=0, PC2 = 0, PC3 = 0)
line.gd7 = rbind(mean[1,2:4],origo,-mean[1,2:4])
line.gd7$factor = "Gd7"
line.toll10b = rbind(mean[2,2:4],origo,-mean[2,2:4])
line.toll10b$factor = "Toll10b"
line.toll9 = rbind(mean[3,2:4],origo,-mean[3,2:4])
line.toll9$factor = "Toll9"
line.time = rbind(meantime[2,2:4],origo,meantime[1,2:4])
line.time$factor = "Time"
line = rbind(line.gd7,line.toll10b,line.toll9,line.time)
pctable$factor  = pctable$mutant
pctable$factor =  recode(pctable$factor, gd7 = "Gd7")
pctable$factor =  recode(pctable$factor, toll9 = "Toll9")
pctable$factor =  recode(pctable$factor, toll10b = "Toll10b")
qplot(PC, Variance, data=e.var, geom = c("point")
, ylim = c(0,max(e.var$Variance)+5)
,ylab = "Variance (%)")
test
ggplot(line, mapping = aes(x = PC2,y = PC3, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC2,y = PC3, color = factor, shape = time))+
scale_color_viridis(discrete = TRUE, option = "D")
ggplot(line, mapping = aes(x = PC1,y = PC2, color = factor))+ geom_line() + geom_point(data = pctable,  mapping = aes(x = PC1,y = PC2, color = factor, shape = time))+
scale_color_viridis(discrete = TRUE, option = "D")
sampleInfoFile = paste(params$workingDir, params$dataDir,"sampleInfo.QC.tab.txt", sep = "/")
write.table(x = sampleInfo.QC,
file = sampleInfoFile,
quote = F,
sep =  "\t",
row.names = F,
col.names = T
)
geneTableFile = paste(params$workingDir, params$dataDir,"gene.QC.tab.txt", sep = "/")
write.table(x = geneInfo.QC,
file = geneTableFile,
quote = F,
sep =  "\t",
row.names = F,
col.names = T
)
countTableFile = paste(params$workingDir, params$dataDir,"counts.QC.tab.txt", sep = "/")
write.table(x = countData.QC,
file = countTableFile,
quote = F,
sep =  "\t",
row.names = T,
col.names = T
)
rlogTableFile = paste(params$workingDir, params$dataDir,"rlog.QC.tab.txt", sep = "/")
write.table(x = normExpression.QC,
file = rlogTableFile,
quote = F,
sep =  "\t",
row.names = T,
col.names = T
)
sampleInfoFile = paste(params$workingDir, params$resultsDir,"sampleInfo.QC.tab.txt", sep = "/")
write.table(x = sampleInfo.QC, file = sampleInfoFile, quote = F, sep =  "\t", row.names = F,col.names = T)
sampleInfoFile = paste(params$workingDir, params$resultsDir,"sampleInfo.QC.tab.txt", sep = "/")
write.table(x = sampleInfo.QC, file = sampleInfoFile, quote = F, sep =  "\t", row.names = F,col.names = T)
geneTableFile = paste(params$workingDir, params$resultsDir,"gene.QC.tab.txt", sep = "/")
write.table(x = geneInfo.QC, file = geneTableFile, quote = F, sep =  "\t", row.names = F, col.names = T)
countTableFile = paste(params$workingDir, params$resultsDir,"counts.QC.tab.txt", sep = "/")
write.table(x = countData.QC, file = countTableFile, quote = F, sep =  "\t", row.names = T, col.names = T)
rlogTableFile = paste(params$workingDir, params$resultsDir,"rlog.QC.tab.txt", sep = "/")
write.table(x = normExpression.QC, file = rlogTableFile, quote = F, sep =  "\t", row.names = T, col.names = T)
knitr::opts_chunk$set(echo = TRUE)
#BiocManager::install("DESeq2")
#install.packages("RColorBrewer")
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
library(DESeq2)
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(gplots)
library("viridis")
install.packages("kableExtra")
install.packages("kableExtra")
library(kableExtra)
#install.packages("kableExtra")
install.packages(tidyverse)
#install.packages("kableExtra")
install.packages("tidyverse")
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir,"Rscripts/ExpressionAnalysisFunctions.R",sep = "/"))
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
library(tidyverse)
library(gplots)
library(kableExtra)
library(DESeq2)
library("viridis")
gtfFile = paste(params$workingDir, params$gtffile, sep='/')
gtfFile
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")
# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
library(tidyverse)
library(gplots)
library(kableExtra)
library(DESeq2)
library("viridis")
featureCountFile = paste(params$workingDir, params$dataDir,params$count_ATAC, sep = "/")
FCdata = read.table( file = featureCountFile, header = TRUE, sep = "\t", quote = "", stringsAsFactors = FALSE)
peakInfo  = FCdata [,1:6]
countData = FCdata[,-1:-6]
rownames(countData) = peakInfo$Geneid
