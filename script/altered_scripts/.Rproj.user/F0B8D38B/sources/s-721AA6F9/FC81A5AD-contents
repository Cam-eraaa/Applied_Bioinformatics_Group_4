---
title: "ATACseq analysis"
author: "Jenny Jakobsson"
date: "11/11/2020"
output: html_document

params:
    workingDir: ~/Applied_Bioinformatics_Group_4
    dataDir: data_johan/data/ATACseq
    RscriptsDir: script/original_scripts
    proSeqDir: results/original_method/PRO-seq
    resultsDir: results/original_method/ATACseq
    ATACSeq.data: ATACseq.data.tsv
    ATACSeq.data.raw: ATACseq.data.raw.tsv
    sampleInfo: data_johan/information/cleaned/ChIP_ATAC_sampleInfo.tab.txt
    count_ATAC: ATAC.CBP.peak.featureCount.count.tab.txt
    count_ATAC_QC: ATAC.CBP.peak.featureCount.count.QC.tab.txt
    normalisedATACpeakData: ATAC.CBP.peak.featureCount.rlog.tab.txt
    Method: ATAC-Seq
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
# Install required packages
#install.packages("kableExtra")
#install.packages("tidyverse")
#install.packages("RColorBrewer")

# Include the functions from the expression analysis script
source(paste(params$workingDir, params$RscriptsDir,"ExpressionAnalysisFunctions.r", sep = "/"))
library(tidyverse)
library(gplots)
library(kableExtra)
library(DESeq2)
library("viridis")
```

## Loading the data
### Loading the count data
Loads the count data and extracts the interesting information. Also changes column names to more understandable headers.

```{r Adding the first analysis of the data ,message=FALSE ,warning = FALSE}
# Read in the ATACseq count data
featureCountFile = paste(params$workingDir, params$dataDir,params$count_ATAC, sep = "/")
FCdata = read.table( file = featureCountFile, header = TRUE, sep = "\t", quote = "", stringsAsFactors = FALSE)
# Save the columns with info in peak info
peakInfo  = FCdata [,1:6]
# Save the count data info in table countData
countData = FCdata[,-1:-6]
# Change row names to geneID which is saved in peakInfo
rownames(countData) = peakInfo$Geneid
```

### Loading the sample info
Load the sample info and merge the information with the count data

```{r handle the samples ,message=FALSE ,warning = FALSE}
# Load the sample data
sampleInfoFile = paste(params$workingDir, params$sampleInfo, sep = "/")
sampleInfo = read.table(
  file = sampleInfoFile,
  header = TRUE,
  sep = "\t",
  quote = "",
  stringsAsFactors = FALSE
)

sampleInfo$bamFiles2  =  gsub(pattern = "/",
                              replacement = ".",
                              x = sampleInfo$bamFiles)
sampleInfo$bamFiles2  =  gsub(pattern = "-",
                              replacement = ".",
                              x = sampleInfo$bamFiles2)

# Rename the mutants in sampledata so that the names are universal for the data
sampleInfo$Genotype = recode(sampleInfo$Genotype, Toll910 = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, `Toll9/10` = "Toll9")
sampleInfo$Genotype = recode(sampleInfo$Genotype, gd7 = "Gd7")

# Filter out the sampleInfo that is not ATACseq
sampleInfo = sampleInfo %>% filter(Assaytype == params$Method)
#sampleInfoCountTable = data.frame(bamFiles2 = colnames(countData))


#sampleInfo = inner_join(sampleInfo, sampleInfoCountTable)

countData = countData[, sampleInfo$bamFiles2]
sampleInfo$Nuclearcycle[is.na(sampleInfo$Nuclearcycle)] = "Mutant"



colnames(countData) = sampleInfo$SampleInfo


fixedSamples = sampleInfo$SampleInfo[grep(pattern = "Fixed", x = sampleInfo$SampleInfo)]
spikedSamples = sampleInfo$SampleInfo[grep(pattern = "spiked", x = sampleInfo$SampleInfo)]



sampleInfo_Mutants = sampleInfo %>% filter(Nuclearcycle == "Mutant") %>%
  filter(!SampleInfo %in% fixedSamples) %>%
  filter(!SampleInfo %in% spikedSamples)

countData_mutants = countData[, sampleInfo_Mutants$SampleInfo]


```


## Filtering

```{r differential gene expression analysis ,message=FALSE ,warning = FALSE}

exp.data = countData_mutants
metaInfo = sampleInfo_Mutants

rownames(metaInfo) = sampleInfo_Mutants$SampleInfo

metaInfo$Antibody = as.factor(metaInfo$Antibody)
metaInfo$Genotype = as.factor(metaInfo$Genotype)

dds <- DESeqDataSetFromMatrix(countData = exp.data,
                               colData = metaInfo,
                               design = ~Genotype )


#Remove rows with low counts and normalise samples for visualisation
dds <- dds[ rowSums(counts(dds)) > 100, ]

dim(dds)
#Normalizing and change to 2 fold log changes. 
rld <- rlog(dds)


normExpression = as.data.frame(assay(rld))

normExpression$geneID = rownames(normExpression)
normExpressionDF  = normExpression %>% gather( key = sampleName, value = rlog, -geneID)

#normExpressionDF = inner_join(normExpressionDF, sampleInfo)


ggplot(normExpressionDF, aes(x = rlog, color = sampleName)) + geom_density()

geneInfo = normExpressionDF %>% 
  dplyr::select(geneID, rlog, sampleName) %>% 
  dplyr::group_by (geneID) %>%
  dplyr::summarize ( min = min(rlog), 
                     max = max(rlog), 
                     mean = mean(rlog), 
                     sd = sd(rlog), 
                     overQC = length(which(rlog > 5))
                     ) 



geneInfo.QC2 = geneInfo %>% 
  filter(overQC > 2)

normExpressionDF.QC = normExpressionDF %>%
  filter(geneID %in% geneInfo.QC2$geneID)

ggplot(normExpressionDF.QC, aes(x = rlog, color = sampleName)) + geom_density()



normExpression.QC = normExpressionDF.QC %>%
  dplyr::select(geneID, sampleName, rlog) %>% 
  spread(key = sampleName, value = rlog)

rownames(normExpression.QC) = normExpression.QC$geneID
normExpression.QC = normExpression.QC[, -1]


```


### Print ATAC data to file

```{r save the files ,message=FALSE ,warning = FALSE}
## Saving sampleInfo File

sampleInfoFile = paste(params$workingDir,
                       params$resultsDir,
                       "ATAC.sampleInfo.QC.tab.txt",
                       sep = "/")

write.table(
  x = sampleInfo_Mutants,
  file = sampleInfoFile,
  quote = F,
  sep =  "\t",
  row.names = F,
  col.names = T
)

## Saving peakInfo File

peakInfo_QC = peakInfo %>%
  dplyr::rename(geneID = Geneid) %>%
  inner_join(geneInfo.QC2)

peakTableFile = paste(params$workingDir,
                      params$resultsDir,
                      "ATAC.CBP.peaks.QC.tab.txt",
                      sep = "/")
write.table(
  x = peakInfo_QC,
  file = peakTableFile,
  quote = F,
  sep =  "\t",
  row.names = F,
  col.names = T
)

count_ATAC_QC_File = paste(params$workingDir,
                           params$resultsDir,
                           paste(params$count_ATAC_QC, sep = "."),
                           sep = "/")



countData.QC = countData_mutants[peakInfo_QC$geneID,
                                 sampleInfo_Mutants$SampleInfo]



write.table(
  x = countData.QC,
  file = count_ATAC_QC_File,
  quote = F,
  sep =  "\t",
  row.names = T,
  col.names = T
)




## Saving normalised count file
NormalisedCountFile = paste(
  params$workingDir,
  params$resultsDir,
  paste(params$normalisedATACpeakData, sep = "."),
  sep = "/"
)

normExpression.QC = normExpression[peakInfo_QC$geneID, sampleInfo_Mutants$SampleInfo]

write.table(
  x = normExpression.QC,
  file = NormalisedCountFile,
  quote = F,
  sep = "\t",
  col.names = T,
  row.names = T
)

```

